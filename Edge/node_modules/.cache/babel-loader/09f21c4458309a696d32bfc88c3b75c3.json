{"ast":null,"code":"var _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\n\nvar errors = require('./errors');\n\nvar StreamReaction = function StreamReaction() {\n  this.initialize.apply(this, arguments);\n};\n\nStreamReaction.prototype = {\n  initialize: function initialize(client, token) {\n    /**\n     * Initialize a feed object\n     * @method intialize\n     * @memberof StreamReaction.prototype\n     * @param {StreamClient} client Stream client this feed is constructed from\n     * @param {string} token JWT token\n     * @example new StreamReaction(client, \"eyJhbGciOiJIUzI1...\")\n     */\n    this.client = client;\n    this.token = token;\n    this.signature = token;\n  },\n  buildURL: function buildURL() {\n    var url = 'reaction/';\n\n    for (var i = 0; i < arguments.length; i++) {\n      url += arguments[i] + '/';\n    }\n\n    return url;\n  },\n  all: function all(options, callback) {\n    /**\n     * get all reactions\n     * @method all\n     * @memberof StreamReaction.prototype\n     * @param  {object}   options  {limit:}\n     * @param  {requestCallback} callback Callback to call on completion\n     * @return {Promise} Promise object\n     * @example reactions.all()\n     * @example reactions.all({limit:100})\n     */\n    return this.client.get({\n      url: this.buildURL(),\n      signature: this.signature\n    }, callback);\n  },\n  _convertTargetFeeds: function _convertTargetFeeds() {\n    var targetFeeds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    return targetFeeds.map(function (elem) {\n      return typeof elem === 'string' ? elem : elem.id;\n    });\n  },\n  add: function add(kind, activity) {\n    var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},\n        id = _ref.id,\n        _ref$targetFeeds = _ref.targetFeeds,\n        targetFeeds = _ref$targetFeeds === void 0 ? [] : _ref$targetFeeds,\n        userId = _ref.userId;\n\n    var callback = arguments.length > 4 ? arguments[4] : undefined;\n    /**\n     * add reaction\n     * @method add\n     * @memberof StreamReaction.prototype\n     * @param  {string}   kind  kind of reaction\n     * @param  {string}   activity Activity or an ActivityID\n     * @param  {object}   data  data related to reaction\n     * @param  {array}    targetFeeds  an array of feeds to which to send an activity with the reaction\n     * @param  {requestCallback} callback Callback to call on completion\n     * @return {Promise} Promise object\n     * @example reactions.add(\"like\", \"0c7db91c-67f9-11e8-bcd9-fe00a9219401\")\n     * @example reactions.add(\"comment\", \"0c7db91c-67f9-11e8-bcd9-fe00a9219401\", {\"text\": \"love it!\"},)\n     */\n\n    if (activity instanceof Object) {\n      activity = activity.id;\n    }\n\n    targetFeeds = this._convertTargetFeeds(targetFeeds);\n    var body = {\n      id: id,\n      activity_id: activity,\n      kind: kind,\n      data: data,\n      target_feeds: targetFeeds,\n      user_id: userId\n    };\n    return this.client.post({\n      url: this.buildURL(),\n      body: body,\n      signature: this.signature\n    }, callback);\n  },\n  addChild: function addChild(kind, reaction) {\n    var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var _ref2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},\n        _ref2$targetFeeds = _ref2.targetFeeds,\n        targetFeeds = _ref2$targetFeeds === void 0 ? [] : _ref2$targetFeeds,\n        userId = _ref2.userId;\n\n    var callback = arguments.length > 4 ? arguments[4] : undefined;\n    /**\n     * add reaction\n     * @method add\n     * @memberof StreamReaction.prototype\n     * @param  {string}   kind  kind of reaction\n     * @param  {string}   reaction Reaction or a ReactionID\n     * @param  {object}   data  data related to reaction\n     * @param  {array}    targetFeeds  an array of feeds to which to send an activity with the reaction\n     * @param  {requestCallback} callback Callback to call on completion\n     * @return {Promise} Promise object\n     * @example reactions.add(\"like\", \"0c7db91c-67f9-11e8-bcd9-fe00a9219401\")\n     * @example reactions.add(\"comment\", \"0c7db91c-67f9-11e8-bcd9-fe00a9219401\", {\"text\": \"love it!\"},)\n     */\n\n    if (reaction instanceof Object) {\n      reaction = reaction.id;\n    }\n\n    targetFeeds = this._convertTargetFeeds(targetFeeds);\n    var body = {\n      parent: reaction,\n      kind: kind,\n      data: data,\n      target_feeds: targetFeeds,\n      user_id: userId\n    };\n    return this.client.post({\n      url: this.buildURL(),\n      body: body,\n      signature: this.signature\n    }, callback);\n  },\n  get: function get(id, callback) {\n    /**\n     * get reaction\n     * @method add\n     * @memberof StreamReaction.prototype\n     * @param  {string}   id Reaction Id\n     * @param  {requestCallback} callback Callback to call on completion\n     * @return {Promise} Promise object\n     * @example reactions.get(\"67b3e3b5-b201-4697-96ac-482eb14f88ec\")\n     */\n    return this.client.get({\n      url: this.buildURL(id),\n      signature: this.signature\n    }, callback);\n  },\n  filter: function filter(conditions, callback) {\n    /**\n     * retrieve reactions by activity_id, user_id or reaction_id (to paginate children reactions), pagination can be done using id_lt, id_lte, id_gt and id_gte parameters\n     * id_lt and id_lte return reactions order by creation descending starting from the reaction with the ID provided, when id_lte is used\n     * the reaction with ID equal to the value provided is included.\n     * id_gt and id_gte return reactions order by creation ascending (oldest to newest) starting from the reaction with the ID provided, when id_gte is used\n     * the reaction with ID equal to the value provided is included.\n     * results are limited to 25 at most and are ordered newest to oldest by default.\n     * @method lookup\n     * @memberof StreamReaction.prototype\n     * @param  {object}   conditions Reaction Id {activity_id|user_id|foreign_id:string, kind:string, next:string, previous:string, limit:integer}\n     * @param  {requestCallback} callback Callback to call on completion\n     * @return {Promise} Promise object\n     * @example reactions.lookup({activity_id: \"0c7db91c-67f9-11e8-bcd9-fe00a9219401\", kind:\"like\"})\n     * @example reactions.lookup({user_id: \"john\", kinds:\"like\"})\n     */\n    var user_id = conditions.user_id,\n        activity_id = conditions.activity_id,\n        reaction_id = conditions.reaction_id,\n        qs = _objectWithoutProperties(conditions, [\"user_id\", \"activity_id\", \"reaction_id\"]);\n\n    if (!qs.limit) {\n      qs.limit = 10;\n    }\n\n    if ((user_id ? 1 : 0 + activity_id ? 1 : 0 + reaction_id ? 1 : 0) != 1) {\n      throw new errors.SiteError('Must provide exactly one value for one of these params: user_id, activity_id, reaction_id');\n    }\n\n    var lookupType = user_id && 'user_id' || activity_id && 'activity_id' || reaction_id && 'reaction_id';\n    var value = user_id || activity_id || reaction_id;\n    var url = this.buildURL(lookupType, value);\n\n    if (conditions.kind) {\n      url = this.buildURL(lookupType, value, conditions.kind);\n    }\n\n    return this.client.get({\n      url: url,\n      qs: qs,\n      signature: this.signature\n    }, callback);\n  },\n  update: function update(id, data) {\n    var _ref3 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n        _ref3$targetFeeds = _ref3.targetFeeds,\n        targetFeeds = _ref3$targetFeeds === void 0 ? [] : _ref3$targetFeeds;\n\n    var callback = arguments.length > 3 ? arguments[3] : undefined;\n    /**\n     * update reaction\n     * @method add\n     * @memberof StreamReaction.prototype\n     * @param  {string}   id Reaction Id\n     * @param  {object}   data  Data associated to reaction\n     * @param  {array}   targetFeeds  Optional feeds to post the activity to. If you sent this before and don't set it here it will be removed.\n     * @param  {requestCallback} callback Callback to call on completion\n     * @return {Promise} Promise object\n     * @example reactions.update(\"67b3e3b5-b201-4697-96ac-482eb14f88ec\", \"0c7db91c-67f9-11e8-bcd9-fe00a9219401\", \"like\")\n     * @example reactions.update(\"67b3e3b5-b201-4697-96ac-482eb14f88ec\", \"0c7db91c-67f9-11e8-bcd9-fe00a9219401\", \"comment\", {\"text\": \"love it!\"},)\n     */\n\n    targetFeeds = this._convertTargetFeeds(targetFeeds);\n    var body = {\n      data: data,\n      target_feeds: targetFeeds\n    };\n    return this.client.put({\n      url: this.buildURL(id),\n      body: body,\n      signature: this.signature\n    }, callback);\n  },\n  delete: function _delete(id, callback) {\n    /**\n     * delete reaction\n     * @method delete\n     * @memberof StreamReaction.prototype\n     * @param  {string}   id Reaction Id\n     * @param  {requestCallback} callback Callback to call on completion\n     * @return {Promise} Promise object\n     * @example reactions.delete(\"67b3e3b5-b201-4697-96ac-482eb14f88ec\")\n     */\n    return this.client.delete({\n      url: this.buildURL(id),\n      signature: this.signature\n    }, callback);\n  }\n};\nmodule.exports = StreamReaction;","map":null,"metadata":{},"sourceType":"script"}