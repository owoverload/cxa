{"ast":null,"code":"'use strict';\n\nvar Class = require('../util/class'),\n    URI = require('../util/uri'),\n    cookies = require('../util/cookies'),\n    extend = require('../util/extend'),\n    Logging = require('../mixins/logging'),\n    Publisher = require('../mixins/publisher'),\n    Transport = require('../transport'),\n    Scheduler = require('./scheduler');\n\nvar Dispatcher = Class({\n  className: 'Dispatcher',\n  MAX_REQUEST_SIZE: 2048,\n  DEFAULT_RETRY: 5,\n  UP: 1,\n  DOWN: 2,\n  initialize: function (client, endpoint, options) {\n    this._client = client;\n    this.endpoint = URI.parse(endpoint);\n    this._alternates = options.endpoints || {};\n    this.cookies = cookies.CookieJar && new cookies.CookieJar();\n    this._disabled = [];\n    this._envelopes = {};\n    this.headers = {};\n    this.retry = options.retry || this.DEFAULT_RETRY;\n    this._scheduler = options.scheduler || Scheduler;\n    this._state = 0;\n    this.transports = {};\n    this.wsExtensions = [];\n    this.proxy = options.proxy || {};\n    if (typeof this._proxy === 'string') this._proxy = {\n      origin: this._proxy\n    };\n    var exts = options.websocketExtensions;\n\n    if (exts) {\n      exts = [].concat(exts);\n\n      for (var i = 0, n = exts.length; i < n; i++) this.addWebsocketExtension(exts[i]);\n    }\n\n    this.tls = options.tls || {};\n    this.tls.ca = this.tls.ca || options.ca;\n\n    for (var type in this._alternates) this._alternates[type] = URI.parse(this._alternates[type]);\n\n    this.maxRequestSize = this.MAX_REQUEST_SIZE;\n  },\n  endpointFor: function (connectionType) {\n    return this._alternates[connectionType] || this.endpoint;\n  },\n  addWebsocketExtension: function (extension) {\n    this.wsExtensions.push(extension);\n  },\n  disable: function (feature) {\n    this._disabled.push(feature);\n  },\n  setHeader: function (name, value) {\n    this.headers[name] = value;\n  },\n  close: function () {\n    var transport = this._transport;\n    delete this._transport;\n    if (transport) transport.close();\n  },\n  getConnectionTypes: function () {\n    return Transport.getConnectionTypes();\n  },\n  selectTransport: function (transportTypes) {\n    Transport.get(this, transportTypes, this._disabled, function (transport) {\n      this.debug('Selected ? transport for ?', transport.connectionType, URI.stringify(transport.endpoint));\n      if (transport === this._transport) return;\n      if (this._transport) this._transport.close();\n      this._transport = transport;\n      this.connectionType = transport.connectionType;\n    }, this);\n  },\n  sendMessage: function (message, timeout, options) {\n    options = options || {};\n    var id = message.id,\n        attempts = options.attempts,\n        deadline = options.deadline && new Date().getTime() + options.deadline * 1000,\n        envelope = this._envelopes[id],\n        scheduler;\n\n    if (!envelope) {\n      scheduler = new this._scheduler(message, {\n        timeout: timeout,\n        interval: this.retry,\n        attempts: attempts,\n        deadline: deadline\n      });\n      envelope = this._envelopes[id] = {\n        message: message,\n        scheduler: scheduler\n      };\n    }\n\n    this._sendEnvelope(envelope);\n  },\n  _sendEnvelope: function (envelope) {\n    if (!this._transport) return;\n    if (envelope.request || envelope.timer) return;\n    var message = envelope.message,\n        scheduler = envelope.scheduler,\n        self = this;\n\n    if (!scheduler.isDeliverable()) {\n      scheduler.abort();\n      delete this._envelopes[message.id];\n      return;\n    }\n\n    envelope.timer = global.setTimeout(function () {\n      self.handleError(message);\n    }, scheduler.getTimeout() * 1000);\n    scheduler.send();\n    envelope.request = this._transport.sendMessage(message);\n  },\n  handleResponse: function (reply) {\n    var envelope = this._envelopes[reply.id];\n\n    if (reply.successful !== undefined && envelope) {\n      envelope.scheduler.succeed();\n      delete this._envelopes[reply.id];\n      global.clearTimeout(envelope.timer);\n    }\n\n    this.trigger('message', reply);\n    if (this._state === this.UP) return;\n    this._state = this.UP;\n\n    this._client.trigger('transport:up');\n  },\n  handleError: function (message, immediate) {\n    var envelope = this._envelopes[message.id],\n        request = envelope && envelope.request,\n        self = this;\n    if (!request) return;\n    request.then(function (req) {\n      if (req && req.abort) req.abort();\n    });\n    var scheduler = envelope.scheduler;\n    scheduler.fail();\n    global.clearTimeout(envelope.timer);\n    envelope.request = envelope.timer = null;\n\n    if (immediate) {\n      this._sendEnvelope(envelope);\n    } else {\n      envelope.timer = global.setTimeout(function () {\n        envelope.timer = null;\n\n        self._sendEnvelope(envelope);\n      }, scheduler.getInterval() * 1000);\n    }\n\n    if (this._state === this.DOWN) return;\n    this._state = this.DOWN;\n\n    this._client.trigger('transport:down');\n  }\n});\n\nDispatcher.create = function (client, endpoint, options) {\n  return new Dispatcher(client, endpoint, options);\n};\n\nextend(Dispatcher.prototype, Publisher);\nextend(Dispatcher.prototype, Logging);\nmodule.exports = Dispatcher;","map":null,"metadata":{},"sourceType":"script"}