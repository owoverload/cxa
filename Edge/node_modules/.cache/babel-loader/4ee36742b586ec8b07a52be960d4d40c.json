{"ast":null,"code":"var validate = require('validate.js'),\n    specs = require('./specs.js'),\n    errors = require('./errors.js'),\n    Client = require('./client.js');\n\nvar StreamAnalytics = function (config) {\n  this.configure(config || {});\n};\n\nStreamAnalytics.prototype.configure = function (cfg) {\n  this.client = new Client(cfg);\n  this.userData = null;\n};\n\nStreamAnalytics.prototype.setUser = function (userData) {\n  this.userData = userData;\n};\n\nStreamAnalytics.prototype._sendEventFactory = function (resourceName, dataSpec) {\n  // snakeCase\n  return function (eventData) {\n    var validationErrors = validate(eventData, dataSpec, {\n      format: 'flat'\n    });\n\n    if (typeof validationErrors !== 'undefined') {\n      throw new errors.InvalidInputData('event data is not valid', validationErrors);\n    }\n\n    return this._sendEvent(resourceName, eventData);\n  };\n};\n\nStreamAnalytics.prototype._sendEvent = function (resourceName, eventData) {\n  if (this.userData === null) {\n    throw new errors.MissingUserId('userData was not set');\n  }\n\n  eventData['user_data'] = this.userData;\n  return this.client.send(resourceName, eventData);\n};\n\nStreamAnalytics.prototype.trackImpression = StreamAnalytics.prototype._sendEventFactory('impression', specs.impressionSpec);\nStreamAnalytics.prototype.trackEngagement = StreamAnalytics.prototype._sendEventFactory('engagement', specs.engagementSpec);\nStreamAnalytics.Client = Client;\nStreamAnalytics.errors = errors;\nif (typeof window !== 'undefined') require('./async.js')(StreamAnalytics);\nmodule.exports = StreamAnalytics;","map":null,"metadata":{},"sourceType":"script"}