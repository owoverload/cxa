{"ast":null,"code":"'use strict';\n\nmodule.exports = {\n  commonElement: function (lista, listb) {\n    for (var i = 0, n = lista.length; i < n; i++) {\n      if (this.indexOf(listb, lista[i]) !== -1) return lista[i];\n    }\n\n    return null;\n  },\n  indexOf: function (list, needle) {\n    if (list.indexOf) return list.indexOf(needle);\n\n    for (var i = 0, n = list.length; i < n; i++) {\n      if (list[i] === needle) return i;\n    }\n\n    return -1;\n  },\n  map: function (object, callback, context) {\n    if (object.map) return object.map(callback, context);\n    var result = [];\n\n    if (object instanceof Array) {\n      for (var i = 0, n = object.length; i < n; i++) {\n        result.push(callback.call(context || null, object[i], i));\n      }\n    } else {\n      for (var key in object) {\n        if (!object.hasOwnProperty(key)) continue;\n        result.push(callback.call(context || null, key, object[key]));\n      }\n    }\n\n    return result;\n  },\n  filter: function (array, callback, context) {\n    if (array.filter) return array.filter(callback, context);\n    var result = [];\n\n    for (var i = 0, n = array.length; i < n; i++) {\n      if (callback.call(context || null, array[i], i)) result.push(array[i]);\n    }\n\n    return result;\n  },\n  asyncEach: function (list, iterator, callback, context) {\n    var n = list.length,\n        i = -1,\n        calls = 0,\n        looping = false;\n\n    var iterate = function () {\n      calls -= 1;\n      i += 1;\n      if (i === n) return callback && callback.call(context);\n      iterator(list[i], resume);\n    };\n\n    var loop = function () {\n      if (looping) return;\n      looping = true;\n\n      while (calls > 0) iterate();\n\n      looping = false;\n    };\n\n    var resume = function () {\n      calls += 1;\n      loop();\n    };\n\n    resume();\n  }\n};","map":null,"metadata":{},"sourceType":"script"}