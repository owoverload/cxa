{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (entity, options) {\n  var displayUrl = entity.display_url;\n  var expandedUrl = entity.expanded_url; // Goal: If a user copies and pastes a tweet containing t.co'ed link, the resulting paste\n  // should contain the full original URL (expanded_url), not the display URL.\n  //\n  // Method: Whenever possible, we actually emit HTML that contains expanded_url, and use\n  // font-size:0 to hide those parts that should not be displayed (because they are not part of display_url).\n  // Elements with font-size:0 get copied even though they are not visible.\n  // Note that display:none doesn't work here. Elements with display:none don't get copied.\n  //\n  // Additionally, we want to *display* ellipses, but we don't want them copied.  To make this happen we\n  // wrap the ellipses in a tco-ellipsis class and provide an onCopy handler that sets display:none on\n  // everything with the tco-ellipsis class.\n  //\n  // Exception: pic.twitter.com images, for which expandedUrl = \"https://twitter.com/#!/username/status/1234/photo/1\n  // For those URLs, display_url is not a substring of expanded_url, so we don't do anything special to render the elided parts.\n  // For a pic.twitter.com URL, the only elided part will be the \"https://\", so this is fine.\n\n  var displayUrlSansEllipses = displayUrl.replace(/…/g, ''); // We have to disregard ellipses for matching\n  // Note: we currently only support eliding parts of the URL at the beginning or the end.\n  // Eventually we may want to elide parts of the URL in the *middle*.  If so, this code will\n  // become more complicated.  We will probably want to create a regexp out of display URL,\n  // replacing every ellipsis with a \".*\".\n\n  if (expandedUrl.indexOf(displayUrlSansEllipses) != -1) {\n    var displayUrlIndex = expandedUrl.indexOf(displayUrlSansEllipses);\n    var v = {\n      displayUrlSansEllipses: displayUrlSansEllipses,\n      // Portion of expandedUrl that precedes the displayUrl substring\n      beforeDisplayUrl: expandedUrl.substr(0, displayUrlIndex),\n      // Portion of expandedUrl that comes after displayUrl\n      afterDisplayUrl: expandedUrl.substr(displayUrlIndex + displayUrlSansEllipses.length),\n      precedingEllipsis: displayUrl.match(/^…/) ? '…' : '',\n      followingEllipsis: displayUrl.match(/…$/) ? '…' : ''\n    };\n\n    for (var k in v) {\n      if (v.hasOwnProperty(k)) {\n        v[k] = (0, _htmlEscape2.default)(v[k]);\n      }\n    } // As an example: The user tweets \"hi http://longdomainname.com/foo\"\n    // This gets shortened to \"hi http://t.co/xyzabc\", with display_url = \"…nname.com/foo\"\n    // This will get rendered as:\n    // <span class='tco-ellipsis'> <!-- This stuff should get displayed but not copied -->\n    //   …\n    //   <!-- There's a chance the onCopy event handler might not fire. In case that happens,\n    //        we include an &nbsp; here so that the … doesn't bump up against the URL and ruin it.\n    //        The &nbsp; is inside the tco-ellipsis span so that when the onCopy handler *does*\n    //        fire, it doesn't get copied.  Otherwise the copied text would have two spaces in a row,\n    //        e.g. \"hi  http://longdomainname.com/foo\".\n    //   <span style='font-size:0'>&nbsp;</span>\n    // </span>\n    // <span style='font-size:0'>  <!-- This stuff should get copied but not displayed -->\n    //   http://longdomai\n    // </span>\n    // <span class='js-display-url'> <!-- This stuff should get displayed *and* copied -->\n    //   nname.com/foo\n    // </span>\n    // <span class='tco-ellipsis'> <!-- This stuff should get displayed but not copied -->\n    //   <span style='font-size:0'>&nbsp;</span>\n    //   …\n    // </span>\n\n\n    v['invisible'] = options.invisibleTagAttrs;\n    return (0, _stringSupplant2.default)(\"<span class='tco-ellipsis'>#{precedingEllipsis}<span #{invisible}>&nbsp;</span></span><span #{invisible}>#{beforeDisplayUrl}</span><span class='js-display-url'>#{displayUrlSansEllipses}</span><span #{invisible}>#{afterDisplayUrl}</span><span class='tco-ellipsis'><span #{invisible}>&nbsp;</span>#{followingEllipsis}</span>\", v);\n  }\n\n  return displayUrl;\n};\n\nvar _htmlEscape = require('./htmlEscape');\n\nvar _htmlEscape2 = _interopRequireDefault(_htmlEscape);\n\nvar _stringSupplant = require('./lib/stringSupplant');\n\nvar _stringSupplant2 = _interopRequireDefault(_stringSupplant);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nmodule.exports = exports['default']; // Copyright 2018 Twitter, Inc.\n// Licensed under the Apache License, Version 2.0\n// http://www.apache.org/licenses/LICENSE-2.0","map":null,"metadata":{},"sourceType":"script"}