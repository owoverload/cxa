{"ast":null,"code":"'use strict';\n\nmodule.exports = {\n  isURI: function (uri) {\n    return uri && uri.protocol && uri.host && uri.path;\n  },\n  isSameOrigin: function (uri) {\n    return uri.protocol === location.protocol && uri.hostname === location.hostname && uri.port === location.port;\n  },\n  parse: function (url) {\n    if (typeof url !== 'string') return url;\n    var uri = {},\n        parts,\n        query,\n        pairs,\n        i,\n        n,\n        data;\n\n    var consume = function (name, pattern) {\n      url = url.replace(pattern, function (match) {\n        uri[name] = match;\n        return '';\n      });\n      uri[name] = uri[name] || '';\n    };\n\n    consume('protocol', /^[a-z]+\\:/i);\n    consume('host', /^\\/\\/[^\\/\\?#]+/);\n    if (!/^\\//.test(url) && !uri.host) url = location.pathname.replace(/[^\\/]*$/, '') + url;\n    consume('pathname', /^[^\\?#]*/);\n    consume('search', /^\\?[^#]*/);\n    consume('hash', /^#.*/);\n    uri.protocol = uri.protocol || location.protocol;\n\n    if (uri.host) {\n      uri.host = uri.host.substr(2);\n      parts = uri.host.split(':');\n      uri.hostname = parts[0];\n      uri.port = parts[1] || '';\n    } else {\n      uri.host = location.host;\n      uri.hostname = location.hostname;\n      uri.port = location.port;\n    }\n\n    uri.pathname = uri.pathname || '/';\n    uri.path = uri.pathname + uri.search;\n    query = uri.search.replace(/^\\?/, '');\n    pairs = query ? query.split('&') : [];\n    data = {};\n\n    for (i = 0, n = pairs.length; i < n; i++) {\n      parts = pairs[i].split('=');\n      data[decodeURIComponent(parts[0] || '')] = decodeURIComponent(parts[1] || '');\n    }\n\n    uri.query = data;\n    uri.href = this.stringify(uri);\n    return uri;\n  },\n  stringify: function (uri) {\n    var string = uri.protocol + '//' + uri.hostname;\n    if (uri.port) string += ':' + uri.port;\n    string += uri.pathname + this.queryString(uri.query) + (uri.hash || '');\n    return string;\n  },\n  queryString: function (query) {\n    var pairs = [];\n\n    for (var key in query) {\n      if (!query.hasOwnProperty(key)) continue;\n      pairs.push(encodeURIComponent(key) + '=' + encodeURIComponent(query[key]));\n    }\n\n    if (pairs.length === 0) return '';\n    return '?' + pairs.join('&');\n  }\n};","map":null,"metadata":{},"sourceType":"script"}