{"ast":null,"code":"'use strict';\n\nvar Class = require('../util/class'),\n    URI = require('../util/uri'),\n    browser = require('../util/browser'),\n    extend = require('../util/extend'),\n    toJSON = require('../util/to_json'),\n    Transport = require('./transport');\n\nvar XHR = extend(Class(Transport, {\n  encode: function (messages) {\n    return toJSON(messages);\n  },\n  request: function (messages) {\n    var href = this.endpoint.href,\n        self = this,\n        xhr; // Prefer XMLHttpRequest over ActiveXObject if they both exist\n\n    if (global.XMLHttpRequest) {\n      xhr = new XMLHttpRequest();\n    } else if (global.ActiveXObject) {\n      xhr = new ActiveXObject('Microsoft.XMLHTTP');\n    } else {\n      return this._handleError(messages);\n    }\n\n    xhr.open('POST', href, true);\n    xhr.setRequestHeader('Content-Type', 'application/json');\n    xhr.setRequestHeader('Pragma', 'no-cache');\n    xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n    var headers = this._dispatcher.headers;\n\n    for (var key in headers) {\n      if (!headers.hasOwnProperty(key)) continue;\n      xhr.setRequestHeader(key, headers[key]);\n    }\n\n    var abort = function () {\n      xhr.abort();\n    };\n\n    if (global.onbeforeunload !== undefined) browser.Event.on(global, 'beforeunload', abort);\n\n    xhr.onreadystatechange = function () {\n      if (!xhr || xhr.readyState !== 4) return;\n      var replies = null,\n          status = xhr.status,\n          text = xhr.responseText,\n          successful = status >= 200 && status < 300 || status === 304 || status === 1223;\n      if (global.onbeforeunload !== undefined) browser.Event.detach(global, 'beforeunload', abort);\n\n      xhr.onreadystatechange = function () {};\n\n      xhr = null;\n      if (!successful) return self._handleError(messages);\n\n      try {\n        replies = JSON.parse(text);\n      } catch (error) {}\n\n      if (replies) self._receive(replies);else self._handleError(messages);\n    };\n\n    xhr.send(this.encode(messages));\n    return xhr;\n  }\n}), {\n  isUsable: function (dispatcher, endpoint, callback, context) {\n    var usable = navigator.product === 'ReactNative' || URI.isSameOrigin(endpoint);\n    callback.call(context, usable);\n  }\n});\nmodule.exports = XHR;","map":null,"metadata":{},"sourceType":"script"}