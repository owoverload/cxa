{"ast":null,"code":"'use strict';\n\nvar Class = require('../util/class'),\n    URI = require('../util/uri'),\n    copyObject = require('../util/copy_object'),\n    extend = require('../util/extend'),\n    Deferrable = require('../mixins/deferrable'),\n    Transport = require('./transport'),\n    XHR = require('./xhr');\n\nvar EventSource = extend(Class(Transport, {\n  initialize: function (dispatcher, endpoint) {\n    Transport.prototype.initialize.call(this, dispatcher, endpoint);\n    if (!global.EventSource) return this.setDeferredStatus('failed');\n    this._xhr = new XHR(dispatcher, endpoint);\n    endpoint = copyObject(endpoint);\n    endpoint.pathname += '/' + dispatcher.clientId;\n    var socket = new global.EventSource(URI.stringify(endpoint)),\n        self = this;\n\n    socket.onopen = function () {\n      self._everConnected = true;\n      self.setDeferredStatus('succeeded');\n    };\n\n    socket.onerror = function () {\n      if (self._everConnected) {\n        self._handleError([]);\n      } else {\n        self.setDeferredStatus('failed');\n        socket.close();\n      }\n    };\n\n    socket.onmessage = function (event) {\n      var replies;\n\n      try {\n        replies = JSON.parse(event.data);\n      } catch (error) {}\n\n      if (replies) self._receive(replies);else self._handleError([]);\n    };\n\n    this._socket = socket;\n  },\n  close: function () {\n    if (!this._socket) return;\n    this._socket.onopen = this._socket.onerror = this._socket.onmessage = null;\n\n    this._socket.close();\n\n    delete this._socket;\n  },\n  isUsable: function (callback, context) {\n    this.callback(function () {\n      callback.call(context, true);\n    });\n    this.errback(function () {\n      callback.call(context, false);\n    });\n  },\n  encode: function (messages) {\n    return this._xhr.encode(messages);\n  },\n  request: function (messages) {\n    return this._xhr.request(messages);\n  }\n}), {\n  isUsable: function (dispatcher, endpoint, callback, context) {\n    var id = dispatcher.clientId;\n    if (!id) return callback.call(context, false);\n    XHR.isUsable(dispatcher, endpoint, function (usable) {\n      if (!usable) return callback.call(context, false);\n      this.create(dispatcher, endpoint).isUsable(callback, context);\n    }, this);\n  },\n  create: function (dispatcher, endpoint) {\n    var sockets = dispatcher.transports.eventsource = dispatcher.transports.eventsource || {},\n        id = dispatcher.clientId;\n    var url = copyObject(endpoint);\n    url.pathname += '/' + (id || '');\n    url = URI.stringify(url);\n    sockets[url] = sockets[url] || new this(dispatcher, endpoint);\n    return sockets[url];\n  }\n});\nextend(EventSource.prototype, Deferrable);\nmodule.exports = EventSource;","map":null,"metadata":{},"sourceType":"script"}