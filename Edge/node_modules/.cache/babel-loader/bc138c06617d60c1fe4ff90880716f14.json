{"ast":null,"code":"var _extends = require(\"@babel/runtime/helpers/extends\");\n\nvar fetch = require('@stream-io/cross-fetch');\n\nvar Headers = require('@stream-io/cross-fetch').Headers;\n\nvar FormData = require('form-data');\n\nvar utils = require('./utils');\n\nvar errors = require('./errors');\n\nvar StreamImageStore = function StreamImageStore() {\n  this.initialize.apply(this, arguments);\n};\n\nStreamImageStore.prototype = {\n  initialize: function initialize(client, token) {\n    this.client = client;\n    this.token = token;\n  },\n  // React Native does not auto-detect MIME type, you need to pass that via contentType\n  // param. If you don't then Android will refuse to perform the upload\n  upload: function upload(uri, name, contentType) {\n    var data = new FormData();\n    var fileField;\n\n    if (utils.isReadableStream(uri)) {\n      fileField = uri;\n    } else {\n      fileField = {\n        uri: uri,\n        name: name || uri.split('/').reverse()[0]\n      };\n\n      if (contentType != null) {\n        fileField.type = contentType;\n      }\n    }\n\n    data.append('file', fileField);\n    return fetch(\"\".concat(this.client.enrichUrl('images/'), \"?api_key=\").concat(this.client.apiKey), {\n      method: 'post',\n      body: data,\n      headers: new Headers({\n        Authorization: this.token\n      })\n    }).then(function (r) {\n      if (r.ok) {\n        return r.json();\n      } // error\n\n\n      return r.text().then(function (responseData) {\n        r.statusCode = r.status;\n\n        try {\n          responseData = JSON.parse(responseData);\n        } catch (e) {// ignore json parsing errors\n        }\n\n        throw new errors.StreamApiError(JSON.stringify(responseData) + ' with HTTP status code ' + r.status, responseData, r);\n      });\n    });\n  },\n  delete: function _delete(uri) {\n    return this.client.delete({\n      url: \"images/\",\n      qs: {\n        url: uri\n      },\n      signature: this.token\n    });\n  },\n  process: function process(uri, options) {\n    var params = _extends(options, {\n      url: uri\n    });\n\n    if (Array.isArray(params.crop)) {\n      params.crop = params.crop.join(',');\n    }\n\n    return this.client.get({\n      url: \"images/\",\n      qs: params,\n      signature: this.token\n    });\n  },\n  thumbmail: function thumbmail(uri, w, h) {\n    var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {\n      crop: 'center',\n      resize: 'clip'\n    },\n        crop = _ref.crop,\n        resize = _ref.resize;\n\n    return this.process(uri, {\n      w: w,\n      h: h,\n      crop: crop,\n      resize: resize\n    });\n  }\n};\nmodule.exports = StreamImageStore;","map":null,"metadata":{},"sourceType":"script"}