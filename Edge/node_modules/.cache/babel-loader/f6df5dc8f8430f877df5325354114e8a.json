{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TypeName = undefined;\nexports.parse = parse;\nexports.toCodePoints = toCodePoints;\n\nvar _regex = require('./lib/regex');\n\nvar _regex2 = _interopRequireDefault(_regex);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar TypeName = exports.TypeName = 'emoji'; // Copyright Twitter Inc. Licensed under MIT\n// https://github.com/twitter/twemoji-parser/blob/master/LICENSE.md\n\nfunction parse(text, options) {\n  var assetType = options && options.assetType ? options.assetType : 'svg';\n  var getTwemojiUrl = options && options.buildUrl ? options.buildUrl : function (codepoints, assetType) {\n    return assetType === 'png' ? 'https://twemoji.maxcdn.com/2/72x72/' + codepoints + '.png' : 'https://twemoji.maxcdn.com/2/svg/' + codepoints + '.svg';\n  };\n  var entities = [];\n  _regex2.default.lastIndex = 0;\n\n  while (true) {\n    var result = _regex2.default.exec(text);\n\n    if (!result) {\n      break;\n    }\n\n    var emojiText = result[0];\n    var codepoints = toCodePoints(removeVS16s(emojiText)).join('-');\n    entities.push({\n      url: codepoints ? getTwemojiUrl(codepoints, assetType) : '',\n      indices: [result.index, _regex2.default.lastIndex],\n      text: emojiText,\n      type: TypeName\n    });\n  }\n\n  return entities;\n}\n\nvar vs16RegExp = /\\uFE0F/g; // avoid using a string literal like '\\u200D' here because minifiers expand it inline\n\nvar zeroWidthJoiner = String.fromCharCode(0x200d);\n\nvar removeVS16s = function removeVS16s(rawEmoji) {\n  return rawEmoji.indexOf(zeroWidthJoiner) < 0 ? rawEmoji.replace(vs16RegExp, '') : rawEmoji;\n};\n\nfunction toCodePoints(unicodeSurrogates) {\n  var points = [];\n  var char = 0;\n  var previous = 0;\n  var i = 0;\n\n  while (i < unicodeSurrogates.length) {\n    char = unicodeSurrogates.charCodeAt(i++);\n\n    if (previous) {\n      points.push((0x10000 + (previous - 0xd800 << 10) + (char - 0xdc00)).toString(16));\n      previous = 0;\n    } else if (char > 0xd800 && char <= 0xdbff) {\n      previous = char;\n    } else {\n      points.push(char.toString(16));\n    }\n  }\n\n  return points;\n}","map":null,"metadata":{},"sourceType":"script"}