{"ast":null,"code":"var _extends = require(\"@babel/runtime/helpers/extends\");\n\nvar StreamUser = function StreamUser() {\n  this.initialize.apply(this, arguments);\n};\n\nStreamUser.prototype = {\n  initialize: function initialize(client, userId, userAuthToken) {\n    /**\n     * Initialize a user session object\n     * @method intialize\n     * @memberof StreamUser.prototype\n     * @param {StreamClient} client Stream client this collection is constructed from\n     * @param {string} userId The ID of the user\n     * @param {string} token JWT token\n     * @example new StreamUser(client, \"123\", \"eyJhbGciOiJIUzI1...\")\n     */\n    this.client = client;\n    this.id = userId;\n    this.data = undefined;\n    this.full = undefined;\n    this.token = userAuthToken;\n    this.url = 'user/' + this.id + '/';\n  },\n  _streamRef: function _streamRef() {\n    return \"SU:\".concat(this.id);\n  },\n  ref: function ref() {\n    return this._streamRef();\n  },\n  delete: function _delete(callback) {\n    return this.client.delete({\n      url: this.url,\n      signature: this.token\n    }).then(function (response) {\n      if (callback) {\n        callback(response);\n      }\n\n      return response;\n    });\n  },\n  get: function get(options, callback) {\n    var _this = this;\n\n    return this.client.get({\n      url: this.url,\n      signature: this.token,\n      qs: options\n    }).then(function (response) {\n      _this.full = _extends({}, response);\n      delete _this.full.duration;\n      _this.data = _this.full.data;\n\n      if (callback) {\n        callback(response);\n      }\n\n      return _this;\n    });\n  },\n  _chooseData: function _chooseData(data) {\n    if (data !== undefined) {\n      return data;\n    }\n\n    if (this.data !== undefined) {\n      return this.data;\n    }\n\n    return {};\n  },\n  create: function create(data, options, callback) {\n    var _this2 = this;\n\n    return this.client.post({\n      url: 'user/',\n      body: {\n        id: this.id,\n        data: this._chooseData(data)\n      },\n      qs: options,\n      signature: this.token\n    }).then(function (response) {\n      _this2.full = _extends({}, response);\n      delete _this2.full.duration;\n      _this2.data = _this2.full.data;\n\n      if (callback) {\n        callback(response);\n      }\n\n      return _this2;\n    });\n  },\n  update: function update(data, callback) {\n    var _this3 = this;\n\n    return this.client.put({\n      url: this.url,\n      body: {\n        data: this._chooseData(data)\n      },\n      signature: this.token\n    }).then(function (response) {\n      _this3.full = _extends({}, response);\n      delete _this3.full.duration;\n      _this3.data = _this3.full.data;\n\n      if (callback) {\n        callback(response);\n      }\n\n      return _this3;\n    });\n  },\n  getOrCreate: function getOrCreate(data, callback) {\n    return this.create(data, {\n      get_or_create: true\n    }, callback);\n  },\n  profile: function profile(callback) {\n    return this.get({\n      with_follow_counts: true\n    }, callback);\n  }\n};\nmodule.exports = StreamUser;","map":null,"metadata":{},"sourceType":"script"}