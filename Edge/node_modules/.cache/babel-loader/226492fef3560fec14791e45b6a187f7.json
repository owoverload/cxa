{"ast":null,"code":"'use strict';\n\nvar Class = require('../util/class'),\n    extend = require('../util/extend'),\n    Publisher = require('../mixins/publisher'),\n    Grammar = require('./grammar');\n\nvar Channel = Class({\n  initialize: function (name) {\n    this.id = this.name = name;\n  },\n  push: function (message) {\n    this.trigger('message', message);\n  },\n  isUnused: function () {\n    return this.countListeners('message') === 0;\n  }\n});\nextend(Channel.prototype, Publisher);\nextend(Channel, {\n  HANDSHAKE: '/meta/handshake',\n  CONNECT: '/meta/connect',\n  SUBSCRIBE: '/meta/subscribe',\n  UNSUBSCRIBE: '/meta/unsubscribe',\n  DISCONNECT: '/meta/disconnect',\n  META: 'meta',\n  SERVICE: 'service',\n  expand: function (name) {\n    var segments = this.parse(name),\n        channels = ['/**', name];\n    var copy = segments.slice();\n    copy[copy.length - 1] = '*';\n    channels.push(this.unparse(copy));\n\n    for (var i = 1, n = segments.length; i < n; i++) {\n      copy = segments.slice(0, i);\n      copy.push('**');\n      channels.push(this.unparse(copy));\n    }\n\n    return channels;\n  },\n  isValid: function (name) {\n    return Grammar.CHANNEL_NAME.test(name) || Grammar.CHANNEL_PATTERN.test(name);\n  },\n  parse: function (name) {\n    if (!this.isValid(name)) return null;\n    return name.split('/').slice(1);\n  },\n  unparse: function (segments) {\n    return '/' + segments.join('/');\n  },\n  isMeta: function (name) {\n    var segments = this.parse(name);\n    return segments ? segments[0] === this.META : null;\n  },\n  isService: function (name) {\n    var segments = this.parse(name);\n    return segments ? segments[0] === this.SERVICE : null;\n  },\n  isSubscribable: function (name) {\n    if (!this.isValid(name)) return null;\n    return !this.isMeta(name) && !this.isService(name);\n  },\n  Set: Class({\n    initialize: function () {\n      this._channels = {};\n    },\n    getKeys: function () {\n      var keys = [];\n\n      for (var key in this._channels) keys.push(key);\n\n      return keys;\n    },\n    remove: function (name) {\n      delete this._channels[name];\n    },\n    hasSubscription: function (name) {\n      return this._channels.hasOwnProperty(name);\n    },\n    subscribe: function (names, subscription) {\n      var name;\n\n      for (var i = 0, n = names.length; i < n; i++) {\n        name = names[i];\n        var channel = this._channels[name] = this._channels[name] || new Channel(name);\n        channel.bind('message', subscription);\n      }\n    },\n    unsubscribe: function (name, subscription) {\n      var channel = this._channels[name];\n      if (!channel) return false;\n      channel.unbind('message', subscription);\n\n      if (channel.isUnused()) {\n        this.remove(name);\n        return true;\n      } else {\n        return false;\n      }\n    },\n    distributeMessage: function (message) {\n      var channels = Channel.expand(message.channel);\n\n      for (var i = 0, n = channels.length; i < n; i++) {\n        var channel = this._channels[channels[i]];\n        if (channel) channel.trigger('message', message);\n      }\n    }\n  })\n});\nmodule.exports = Channel;","map":null,"metadata":{},"sourceType":"script"}