{"ast":null,"code":"var request = require('request');\n\nvar errors = require('./errors.js');\n\nvar Client = function () {\n  this.initialize.apply(this, arguments);\n};\n\nClient.prototype = {\n  baseUrl: 'https://analytics.stream-io-api.com/analytics/v1.0/',\n  initialize: function (cfg) {\n    var configs = cfg || {};\n\n    if (!configs.apiKey || !configs.token) {\n      throw new errors.MisconfiguredClient('the client must be initialized with apiKey and token');\n    }\n\n    this.apiKey = configs.apiKey;\n    this.token = configs.token;\n  },\n  send: function (resourceName, eventData) {\n    var callback = function (err, response) {\n      if (err) {\n        throw err;\n      }\n\n      if (!/^2\\d\\d$/.test(response.statusCode)) {\n        throw new errors.APIError(response.responseText);\n      }\n    };\n\n    return this.post({\n      'url': this.baseUrl + resourceName + '/',\n      'body': eventData\n    }, callback);\n  },\n  userAgent: function () {\n    var description = this.node ? 'node' : 'browser';\n    var version = 'unknown';\n    return 'stream-javascript-client-' + description + '-' + version;\n  },\n  enrichKwargs: function (kwargs) {\n    if (kwargs.qs === undefined) {\n      kwargs.qs = {};\n    }\n\n    kwargs.qs['api_key'] = this.apiKey;\n    kwargs.json = true;\n    kwargs.headers = {};\n    kwargs.headers['stream-auth-type'] = 'jwt';\n    kwargs.headers.Authorization = this.token;\n    kwargs.headers['X-Stream-Client'] = this.userAgent();\n    kwargs.timeout = 10 * 1000; // 10 seconds\n\n    return kwargs;\n  },\n  post: function (kwargs, callback) {\n    kwargs = this.enrichKwargs(kwargs);\n    kwargs.method = 'POST';\n    return request(kwargs, callback);\n  }\n};\nmodule.exports = Client;","map":null,"metadata":{},"sourceType":"script"}