{"ast":null,"code":"var Personalization = function Personalization() {\n  /**\n   * Manage api calls for personalization\n   * The collection object contains convenience functions such as  get, post, delete\n   * @class Personalization\n   */\n  this.initialize.apply(this, arguments);\n};\n\nPersonalization.prototype = {\n  /**\n   * Initialize the Personalization object\n   *\n   * @method intialize\n   * @memberof Personalization.prototype\n   * @param {StreamClient} client - The stream client\n   */\n  initialize: function initialize(client) {\n    this.client = client;\n  },\n  get: function get(resource, options, callback) {\n    /**\n     * Get personalized activities for this feed\n     *\n     * @method get\n     * @memberof Personalization.prototype\n     * @param {object} resource - personalized resource endpoint i.e \"follow_recommendations\"\n     * @param {object} options  Additional options\n     * @param {requestCallback} callback - Callback to call on completion\n     * @return {Promise} Promise object. Personalized feed\n     * @example client.personalization.get('follow_recommendations', {foo: 'bar', baz: 'qux'}, cb)\n     */\n    var last = arguments[arguments.length - 1]; // callback is always the last argument\n\n    callback = last.call ? last : undefined;\n\n    if (!options || options.call) {\n      options = {};\n    }\n\n    return this.client.get({\n      url: resource + '/',\n      serviceName: 'personalization',\n      qs: options,\n      signature: this.client.getPersonalizationToken()\n    }, callback);\n  },\n  post: function post(resource, options, data, callback) {\n    /**\n     * Post data to personalization endpoint\n     *\n     * @method post\n     * @memberof Personalization.prototype\n     * @param {object} resource - personalized resource endpoint i.e \"follow_recommendations\"\n     * @param {object} options - Additional options\n     * @param {object} data - Data to send in the payload\n     * @param {requestCallback} callback - Callback to call on completion\n     * @return {Promise} Promise object. Data that was posted if successful, or an error.\n     * @example client.personalization.post('follow_recommendations', {foo: 'bar', baz: 'qux'}, cb)\n     */\n    var last = arguments[arguments.length - 1]; // callback is always the last argument\n\n    callback = last.call ? last : undefined;\n\n    if (!options || options.call) {\n      options = {};\n    }\n\n    if (!data || data.call) {\n      data = {};\n    }\n\n    return this.client.post({\n      url: resource + '/',\n      serviceName: 'personalization',\n      qs: options,\n      body: data,\n      signature: this.client.getPersonalizationToken()\n    }, callback);\n  },\n  delete: function _delete(resource, options, callback) {\n    /**\n     * Delete metadata or activites\n     *\n     * @method delete\n     * @memberof Personalization.prototype\n     * @param {object} resource - personalized resource endpoint i.e \"follow_recommendations\"\n     * @param {object} options - Additional options\n     * @param {requestCallback} callback - Callback to call on completion\n     * @return {Promise} Promise object. Data that was deleted if successful, or an error.\n     * @example client.personalization.delete('follow_recommendations', {foo: 'bar', baz: 'qux'}, cb)\n     */\n    var last = arguments[arguments.length - 1]; // callback is always the last argument\n\n    callback = last.call ? last : undefined;\n\n    if (!options || options.call) {\n      options = {};\n    }\n\n    return this.client.delete({\n      url: resource + '/',\n      serviceName: 'personalization',\n      qs: options,\n      signature: this.client.getPersonalizationToken()\n    }, callback);\n  }\n};\nmodule.exports = Personalization;","map":null,"metadata":{},"sourceType":"script"}