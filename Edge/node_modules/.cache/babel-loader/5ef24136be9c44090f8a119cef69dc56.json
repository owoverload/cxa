{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extractUrl = require('./regexp/extractUrl');\n\nvar _extractUrl2 = _interopRequireDefault(_extractUrl);\n\nvar _invalidUrlWithoutProtocolPrecedingChars = require('./regexp/invalidUrlWithoutProtocolPrecedingChars');\n\nvar _invalidUrlWithoutProtocolPrecedingChars2 = _interopRequireDefault(_invalidUrlWithoutProtocolPrecedingChars);\n\nvar _idna = require('./lib/idna');\n\nvar _idna2 = _interopRequireDefault(_idna);\n\nvar _validAsciiDomain = require('./regexp/validAsciiDomain');\n\nvar _validAsciiDomain2 = _interopRequireDefault(_validAsciiDomain);\n\nvar _validTcoUrl = require('./regexp/validTcoUrl');\n\nvar _validTcoUrl2 = _interopRequireDefault(_validTcoUrl);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar DEFAULT_PROTOCOL = 'https://'; // Copyright 2018 Twitter, Inc.\n// Licensed under the Apache License, Version 2.0\n// http://www.apache.org/licenses/LICENSE-2.0\n\nvar DEFAULT_PROTOCOL_OPTIONS = {\n  extractUrlsWithoutProtocol: true\n};\nvar MAX_URL_LENGTH = 4096;\nvar MAX_TCO_SLUG_LENGTH = 40;\n\nvar extractUrlsWithIndices = function extractUrlsWithIndices(text) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_PROTOCOL_OPTIONS;\n\n  if (!text || (options.extractUrlsWithoutProtocol ? !text.match(/\\./) : !text.match(/:/))) {\n    return [];\n  }\n\n  var urls = [];\n\n  var _loop = function _loop() {\n    var before = RegExp.$2;\n    var url = RegExp.$3;\n    var protocol = RegExp.$4;\n    var domain = RegExp.$5;\n    var path = RegExp.$7;\n    var endPosition = _extractUrl2.default.lastIndex;\n    var startPosition = endPosition - url.length;\n\n    if (!isValidUrl(url, protocol || DEFAULT_PROTOCOL, domain)) {\n      return 'continue';\n    } // extract ASCII-only domains.\n\n\n    if (!protocol) {\n      if (!options.extractUrlsWithoutProtocol || before.match(_invalidUrlWithoutProtocolPrecedingChars2.default)) {\n        return 'continue';\n      }\n\n      var lastUrl = null;\n      var asciiEndPosition = 0;\n      domain.replace(_validAsciiDomain2.default, function (asciiDomain) {\n        var asciiStartPosition = domain.indexOf(asciiDomain, asciiEndPosition);\n        asciiEndPosition = asciiStartPosition + asciiDomain.length;\n        lastUrl = {\n          url: asciiDomain,\n          indices: [startPosition + asciiStartPosition, startPosition + asciiEndPosition]\n        };\n        urls.push(lastUrl);\n      }); // no ASCII-only domain found. Skip the entire URL.\n\n      if (lastUrl == null) {\n        return 'continue';\n      } // lastUrl only contains domain. Need to add path and query if they exist.\n\n\n      if (path) {\n        lastUrl.url = url.replace(domain, lastUrl.url);\n        lastUrl.indices[1] = endPosition;\n      }\n    } else {\n      // In the case of t.co URLs, don't allow additional path characters.\n      if (url.match(_validTcoUrl2.default)) {\n        var tcoUrlSlug = RegExp.$1;\n\n        if (tcoUrlSlug && tcoUrlSlug.length > MAX_TCO_SLUG_LENGTH) {\n          return 'continue';\n        } else {\n          url = RegExp.lastMatch;\n          endPosition = startPosition + url.length;\n        }\n      }\n\n      urls.push({\n        url: url,\n        indices: [startPosition, endPosition]\n      });\n    }\n  };\n\n  while (_extractUrl2.default.exec(text)) {\n    var _ret = _loop();\n\n    if (_ret === 'continue') continue;\n  }\n\n  return urls;\n};\n\nvar isValidUrl = function isValidUrl(url, protocol, domain) {\n  var urlLength = url.length;\n\n  var punycodeEncodedDomain = _idna2.default.toAscii(domain);\n\n  if (!punycodeEncodedDomain || !punycodeEncodedDomain.length) {\n    return false;\n  }\n\n  urlLength = urlLength + punycodeEncodedDomain.length - domain.length;\n  return protocol.length + urlLength <= MAX_URL_LENGTH;\n};\n\nexports.default = extractUrlsWithIndices;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}