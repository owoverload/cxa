{"ast":null,"code":"'use strict';\n\nvar Event = {\n  _registry: [],\n  on: function (element, eventName, callback, context) {\n    var wrapped = function () {\n      callback.call(context);\n    };\n\n    if (element.addEventListener) element.addEventListener(eventName, wrapped, false);else element.attachEvent('on' + eventName, wrapped);\n\n    this._registry.push({\n      _element: element,\n      _type: eventName,\n      _callback: callback,\n      _context: context,\n      _handler: wrapped\n    });\n  },\n  detach: function (element, eventName, callback, context) {\n    var i = this._registry.length,\n        register;\n\n    while (i--) {\n      register = this._registry[i];\n      if (element && element !== register._element || eventName && eventName !== register._type || callback && callback !== register._callback || context && context !== register._context) continue;\n      if (register._element.removeEventListener) register._element.removeEventListener(register._type, register._handler, false);else register._element.detachEvent('on' + register._type, register._handler);\n\n      this._registry.splice(i, 1);\n\n      register = null;\n    }\n  }\n};\nif (global.onunload !== undefined) Event.on(global, 'unload', Event.detach, Event);\nmodule.exports = {\n  Event: Event\n};","map":null,"metadata":{},"sourceType":"script"}