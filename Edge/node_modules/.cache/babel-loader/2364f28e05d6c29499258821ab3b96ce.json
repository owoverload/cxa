{"ast":null,"code":"var _extends = require(\"@babel/runtime/helpers/extends\");\n\nvar _objectSpread = require(\"@babel/runtime/helpers/objectSpread\");\n\nvar _typeof = require(\"@babel/runtime/helpers/typeof\");\n\nvar jwt = require('jsonwebtoken');\n\nvar JWS_REGEX = /^[a-zA-Z0-9\\-_]+?\\.[a-zA-Z0-9\\-_]+?\\.([a-zA-Z0-9\\-_]+)?$/;\n\nvar Base64 = require('Base64');\n\nfunction decodeBase64Url(base64UrlString) {\n  try {\n    return Base64.atob(toBase64(base64UrlString));\n  } catch (e) {\n    /* istanbul ignore else */\n    if (e.name === 'InvalidCharacterError') {\n      return undefined;\n    } else {\n      throw e;\n    }\n  }\n}\n\nfunction safeJsonParse(thing) {\n  if (_typeof(thing) === 'object') return thing;\n\n  try {\n    return JSON.parse(thing);\n  } catch (e) {\n    return undefined;\n  }\n}\n\nfunction padString(string) {\n  var segmentLength = 4;\n  var diff = string.length % segmentLength;\n  if (!diff) return string;\n  var padLength = segmentLength - diff;\n\n  while (padLength--) {\n    string += '=';\n  }\n\n  return string;\n}\n\nfunction toBase64(base64UrlString) {\n  var b64str = padString(base64UrlString).replace(/\\-/g, '+') // eslint-disable-line no-useless-escape\n  .replace(/_/g, '/');\n  return b64str;\n}\n\nfunction headerFromJWS(jwsSig) {\n  var encodedHeader = jwsSig.split('.', 1)[0];\n  return safeJsonParse(decodeBase64Url(encodedHeader));\n}\n\nexports.headerFromJWS = headerFromJWS;\n\nexports.JWTScopeToken = function (apiSecret, resource, action, opts) {\n  /**\n   * Creates the JWT token for feedId, resource and action using the apiSecret\n   * @method JWTScopeToken\n   * @memberof signing\n   * @private\n   * @param {string} apiSecret - API Secret key\n   * @param {string} resource - JWT payload resource\n   * @param {string} action - JWT payload action\n   * @param {object} [options] - Optional additional options\n   * @param {string} [options.feedId] - JWT payload feed identifier\n   * @param {string} [options.userId] - JWT payload user identifier\n   * @return {string} JWT Token\n   */\n  var options = opts || {},\n      noTimestamp = options.expireTokens ? !options.expireTokens : true;\n  var payload = {\n    resource: resource,\n    action: action\n  };\n\n  if (options.feedId) {\n    payload['feed_id'] = options.feedId;\n  }\n\n  if (options.userId) {\n    payload['user_id'] = options.userId;\n  }\n\n  var token = jwt.sign(payload, apiSecret, {\n    algorithm: 'HS256',\n    noTimestamp: noTimestamp\n  });\n  return token;\n};\n\nexports.JWTUserSessionToken = function (apiSecret, userId) {\n  var extraData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var jwtOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  /**\n   * Creates the JWT token that can be used for a UserSession\n   * @method JWTUserSessionToken\n   * @memberof signing\n   * @private\n   * @param {string} apiSecret - API Secret key\n   * @param {string} userId - The user_id key in the JWT payload\n   * @param {string} [extraData] - Extra that should be part of the JWT token\n   * @param {object} [jwtOptions] - Options that can be past to jwt.sign\n   * @return {string} JWT Token\n   */\n\n  if (typeof userId !== 'string') {\n    throw new TypeError('userId should be a string');\n  }\n\n  var payload = _objectSpread({\n    user_id: userId\n  }, extraData);\n\n  var opts = _extends({\n    algorithm: 'HS256',\n    noTimestamp: true\n  }, jwtOptions);\n\n  var token = jwt.sign(payload, apiSecret, opts);\n  return token;\n};\n\nexports.isJWTSignature = exports.isJWT = function (signature) {\n  /**\n   * check if token is a valid JWT token\n   * @method isJWTSignature\n   * @memberof signing\n   * @private\n   * @param {string} signature - Signature to check\n   * @return {boolean}\n   */\n  if (signature == null || signature.length == 0) {\n    return false;\n  }\n\n  var token = signature.split(' ')[1] || signature;\n  return JWS_REGEX.test(token) && !!headerFromJWS(token);\n};","map":null,"metadata":{},"sourceType":"script"}