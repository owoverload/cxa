{"ast":null,"code":"'use strict';\n\nvar Class = require('../util/class'),\n    Set = require('../util/set'),\n    URI = require('../util/uri'),\n    extend = require('../util/extend'),\n    toJSON = require('../util/to_json'),\n    Transport = require('./transport');\n\nvar CORS = extend(Class(Transport, {\n  encode: function (messages) {\n    return 'message=' + encodeURIComponent(toJSON(messages));\n  },\n  request: function (messages) {\n    var xhrClass = global.XDomainRequest ? XDomainRequest : XMLHttpRequest,\n        xhr = new xhrClass(),\n        id = ++CORS._id,\n        headers = this._dispatcher.headers,\n        self = this,\n        key;\n    xhr.open('POST', URI.stringify(this.endpoint), true);\n\n    if (xhr.setRequestHeader) {\n      xhr.setRequestHeader('Pragma', 'no-cache');\n\n      for (key in headers) {\n        if (!headers.hasOwnProperty(key)) continue;\n        xhr.setRequestHeader(key, headers[key]);\n      }\n    }\n\n    var cleanUp = function () {\n      if (!xhr) return false;\n\n      CORS._pending.remove(id);\n\n      xhr.onload = xhr.onerror = xhr.ontimeout = xhr.onprogress = null;\n      xhr = null;\n    };\n\n    xhr.onload = function () {\n      var replies;\n\n      try {\n        replies = JSON.parse(xhr.responseText);\n      } catch (error) {}\n\n      cleanUp();\n      if (replies) self._receive(replies);else self._handleError(messages);\n    };\n\n    xhr.onerror = xhr.ontimeout = function () {\n      cleanUp();\n\n      self._handleError(messages);\n    };\n\n    xhr.onprogress = function () {};\n\n    if (xhrClass === global.XDomainRequest) CORS._pending.add({\n      id: id,\n      xhr: xhr\n    });\n    xhr.send(this.encode(messages));\n    return xhr;\n  }\n}), {\n  _id: 0,\n  _pending: new Set(),\n  isUsable: function (dispatcher, endpoint, callback, context) {\n    if (URI.isSameOrigin(endpoint)) return callback.call(context, false);\n    if (global.XDomainRequest) return callback.call(context, endpoint.protocol === location.protocol);\n\n    if (global.XMLHttpRequest) {\n      var xhr = new XMLHttpRequest();\n      return callback.call(context, xhr.withCredentials !== undefined);\n    }\n\n    return callback.call(context, false);\n  }\n});\nmodule.exports = CORS;","map":null,"metadata":{},"sourceType":"script"}