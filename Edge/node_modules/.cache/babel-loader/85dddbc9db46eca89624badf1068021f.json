{"ast":null,"code":"'use strict';\n\nvar Class = require('../util/class'),\n    URI = require('../util/uri'),\n    copyObject = require('../util/copy_object'),\n    extend = require('../util/extend'),\n    toJSON = require('../util/to_json'),\n    Transport = require('./transport');\n\nvar JSONP = extend(Class(Transport, {\n  encode: function (messages) {\n    var url = copyObject(this.endpoint);\n    url.query.message = toJSON(messages);\n    url.query.jsonp = '__jsonp' + JSONP._cbCount + '__';\n    return URI.stringify(url);\n  },\n  request: function (messages) {\n    var head = document.getElementsByTagName('head')[0],\n        script = document.createElement('script'),\n        callbackName = JSONP.getCallbackName(),\n        endpoint = copyObject(this.endpoint),\n        self = this;\n    endpoint.query.message = toJSON(messages);\n    endpoint.query.jsonp = callbackName;\n\n    var cleanup = function () {\n      if (!global[callbackName]) return false;\n      global[callbackName] = undefined;\n\n      try {\n        delete global[callbackName];\n      } catch (error) {}\n\n      script.parentNode.removeChild(script);\n    };\n\n    global[callbackName] = function (replies) {\n      cleanup();\n\n      self._receive(replies);\n    };\n\n    script.type = 'text/javascript';\n    script.src = URI.stringify(endpoint);\n    head.appendChild(script);\n\n    script.onerror = function () {\n      cleanup();\n\n      self._handleError(messages);\n    };\n\n    return {\n      abort: cleanup\n    };\n  }\n}), {\n  _cbCount: 0,\n  getCallbackName: function () {\n    this._cbCount += 1;\n    return '__jsonp' + this._cbCount + '__';\n  },\n  isUsable: function (dispatcher, endpoint, callback, context) {\n    callback.call(context, true);\n  }\n});\nmodule.exports = JSONP;","map":null,"metadata":{},"sourceType":"script"}