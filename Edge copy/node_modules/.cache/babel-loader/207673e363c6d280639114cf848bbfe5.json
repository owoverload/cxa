{"ast":null,"code":"'use strict';\n\nvar asap = require('asap'),\n    Class = require('../util/class'),\n    Promise = require('../util/promise'),\n    URI = require('../util/uri'),\n    array = require('../util/array'),\n    browser = require('../util/browser'),\n    constants = require('../util/constants'),\n    extend = require('../util/extend'),\n    validateOptions = require('../util/validate_options'),\n    Deferrable = require('../mixins/deferrable'),\n    Logging = require('../mixins/logging'),\n    Publisher = require('../mixins/publisher'),\n    Channel = require('./channel'),\n    Dispatcher = require('./dispatcher'),\n    Error = require('./error'),\n    Extensible = require('./extensible'),\n    Publication = require('./publication'),\n    Subscription = require('./subscription');\n\nvar Client = Class({\n  className: 'Client',\n  UNCONNECTED: 1,\n  CONNECTING: 2,\n  CONNECTED: 3,\n  DISCONNECTED: 4,\n  HANDSHAKE: 'handshake',\n  RETRY: 'retry',\n  NONE: 'none',\n  CONNECTION_TIMEOUT: 60,\n  DEFAULT_ENDPOINT: '/bayeux',\n  INTERVAL: 0,\n  initialize: function (endpoint, options) {\n    this.info('New client created for ?', endpoint);\n    options = options || {};\n    validateOptions(options, ['interval', 'timeout', 'endpoints', 'proxy', 'retry', 'scheduler', 'websocketExtensions', 'tls', 'ca']);\n    this._channels = new Channel.Set();\n    this._dispatcher = Dispatcher.create(this, endpoint || this.DEFAULT_ENDPOINT, options);\n    this._messageId = 0;\n    this._state = this.UNCONNECTED;\n    this._responseCallbacks = {};\n    this._advice = {\n      reconnect: this.RETRY,\n      interval: 1000 * (options.interval || this.INTERVAL),\n      timeout: 1000 * (options.timeout || this.CONNECTION_TIMEOUT)\n    };\n    this._dispatcher.timeout = this._advice.timeout / 1000;\n\n    this._dispatcher.bind('message', this._receiveMessage, this);\n\n    if (browser.Event && global.onbeforeunload !== undefined) browser.Event.on(global, 'beforeunload', function () {\n      if (array.indexOf(this._dispatcher._disabled, 'autodisconnect') < 0) this.disconnect();\n    }, this);\n  },\n  addWebsocketExtension: function (extension) {\n    return this._dispatcher.addWebsocketExtension(extension);\n  },\n  disable: function (feature) {\n    return this._dispatcher.disable(feature);\n  },\n  setHeader: function (name, value) {\n    return this._dispatcher.setHeader(name, value);\n  },\n  // Request\n  // MUST include:  * channel\n  //                * version\n  //                * supportedConnectionTypes\n  // MAY include:   * minimumVersion\n  //                * ext\n  //                * id\n  //\n  // Success Response                             Failed Response\n  // MUST include:  * channel                     MUST include:  * channel\n  //                * version                                    * successful\n  //                * supportedConnectionTypes                   * error\n  //                * clientId                    MAY include:   * supportedConnectionTypes\n  //                * successful                                 * advice\n  // MAY include:   * minimumVersion                             * version\n  //                * advice                                     * minimumVersion\n  //                * ext                                        * ext\n  //                * id                                         * id\n  //                * authSuccessful\n  handshake: function (callback, context) {\n    if (this._advice.reconnect === this.NONE) return;\n    if (this._state !== this.UNCONNECTED) return;\n    this._state = this.CONNECTING;\n    var self = this;\n    this.info('Initiating handshake with ?', URI.stringify(this._dispatcher.endpoint));\n\n    this._dispatcher.selectTransport(constants.MANDATORY_CONNECTION_TYPES);\n\n    this._sendMessage({\n      channel: Channel.HANDSHAKE,\n      version: constants.BAYEUX_VERSION,\n      supportedConnectionTypes: this._dispatcher.getConnectionTypes()\n    }, {}, function (response) {\n      if (response.successful) {\n        this._state = this.CONNECTED;\n        this._dispatcher.clientId = response.clientId;\n\n        this._dispatcher.selectTransport(response.supportedConnectionTypes);\n\n        this.info('Handshake successful: ?', this._dispatcher.clientId);\n        this.subscribe(this._channels.getKeys(), true);\n        if (callback) asap(function () {\n          callback.call(context);\n        });\n      } else {\n        this.info('Handshake unsuccessful');\n        global.setTimeout(function () {\n          self.handshake(callback, context);\n        }, this._dispatcher.retry * 1000);\n        this._state = this.UNCONNECTED;\n      }\n    }, this);\n  },\n  // Request                              Response\n  // MUST include:  * channel             MUST include:  * channel\n  //                * clientId                           * successful\n  //                * connectionType                     * clientId\n  // MAY include:   * ext                 MAY include:   * error\n  //                * id                                 * advice\n  //                                                     * ext\n  //                                                     * id\n  //                                                     * timestamp\n  connect: function (callback, context) {\n    if (this._advice.reconnect === this.NONE) return;\n    if (this._state === this.DISCONNECTED) return;\n    if (this._state === this.UNCONNECTED) return this.handshake(function () {\n      this.connect(callback, context);\n    }, this);\n    this.callback(callback, context);\n    if (this._state !== this.CONNECTED) return;\n    this.info('Calling deferred actions for ?', this._dispatcher.clientId);\n    this.setDeferredStatus('succeeded');\n    this.setDeferredStatus('unknown');\n    if (this._connectRequest) return;\n    this._connectRequest = true;\n    this.info('Initiating connection for ?', this._dispatcher.clientId);\n\n    this._sendMessage({\n      channel: Channel.CONNECT,\n      clientId: this._dispatcher.clientId,\n      connectionType: this._dispatcher.connectionType\n    }, {}, this._cycleConnection, this);\n  },\n  // Request                              Response\n  // MUST include:  * channel             MUST include:  * channel\n  //                * clientId                           * successful\n  // MAY include:   * ext                                * clientId\n  //                * id                  MAY include:   * error\n  //                                                     * ext\n  //                                                     * id\n  disconnect: function () {\n    if (this._state !== this.CONNECTED) return;\n    this._state = this.DISCONNECTED;\n    this.info('Disconnecting ?', this._dispatcher.clientId);\n    var promise = new Publication();\n\n    this._sendMessage({\n      channel: Channel.DISCONNECT,\n      clientId: this._dispatcher.clientId\n    }, {}, function (response) {\n      if (response.successful) {\n        this._dispatcher.close();\n\n        promise.setDeferredStatus('succeeded');\n      } else {\n        promise.setDeferredStatus('failed', Error.parse(response.error));\n      }\n    }, this);\n\n    this.info('Clearing channel listeners for ?', this._dispatcher.clientId);\n    this._channels = new Channel.Set();\n    return promise;\n  },\n  // Request                              Response\n  // MUST include:  * channel             MUST include:  * channel\n  //                * clientId                           * successful\n  //                * subscription                       * clientId\n  // MAY include:   * ext                                * subscription\n  //                * id                  MAY include:   * error\n  //                                                     * advice\n  //                                                     * ext\n  //                                                     * id\n  //                                                     * timestamp\n  subscribe: function (channel, callback, context) {\n    if (channel instanceof Array) return array.map(channel, function (c) {\n      return this.subscribe(c, callback, context);\n    }, this);\n\n    var subscription = new Subscription(this, channel, callback, context),\n        force = callback === true,\n        hasSubscribe = this._channels.hasSubscription(channel);\n\n    if (hasSubscribe && !force) {\n      this._channels.subscribe([channel], subscription);\n\n      subscription.setDeferredStatus('succeeded');\n      return subscription;\n    }\n\n    this.connect(function () {\n      this.info('Client ? attempting to subscribe to ?', this._dispatcher.clientId, channel);\n      if (!force) this._channels.subscribe([channel], subscription);\n\n      this._sendMessage({\n        channel: Channel.SUBSCRIBE,\n        clientId: this._dispatcher.clientId,\n        subscription: channel\n      }, {}, function (response) {\n        if (!response.successful) {\n          subscription.setDeferredStatus('failed', Error.parse(response.error));\n          return this._channels.unsubscribe(channel, subscription);\n        }\n\n        var channels = [].concat(response.subscription);\n        this.info('Subscription acknowledged for ? to ?', this._dispatcher.clientId, channels);\n        subscription.setDeferredStatus('succeeded');\n      }, this);\n    }, this);\n    return subscription;\n  },\n  // Request                              Response\n  // MUST include:  * channel             MUST include:  * channel\n  //                * clientId                           * successful\n  //                * subscription                       * clientId\n  // MAY include:   * ext                                * subscription\n  //                * id                  MAY include:   * error\n  //                                                     * advice\n  //                                                     * ext\n  //                                                     * id\n  //                                                     * timestamp\n  unsubscribe: function (channel, subscription) {\n    if (channel instanceof Array) return array.map(channel, function (c) {\n      return this.unsubscribe(c, subscription);\n    }, this);\n\n    var dead = this._channels.unsubscribe(channel, subscription);\n\n    if (!dead) return;\n    this.connect(function () {\n      this.info('Client ? attempting to unsubscribe from ?', this._dispatcher.clientId, channel);\n\n      this._sendMessage({\n        channel: Channel.UNSUBSCRIBE,\n        clientId: this._dispatcher.clientId,\n        subscription: channel\n      }, {}, function (response) {\n        if (!response.successful) return;\n        var channels = [].concat(response.subscription);\n        this.info('Unsubscription acknowledged for ? from ?', this._dispatcher.clientId, channels);\n      }, this);\n    }, this);\n  },\n  // Request                              Response\n  // MUST include:  * channel             MUST include:  * channel\n  //                * data                               * successful\n  // MAY include:   * clientId            MAY include:   * id\n  //                * id                                 * error\n  //                * ext                                * ext\n  publish: function (channel, data, options) {\n    validateOptions(options || {}, ['attempts', 'deadline']);\n    var publication = new Publication();\n    this.connect(function () {\n      this.info('Client ? queueing published message to ?: ?', this._dispatcher.clientId, channel, data);\n\n      this._sendMessage({\n        channel: channel,\n        data: data,\n        clientId: this._dispatcher.clientId\n      }, options, function (response) {\n        if (response.successful) publication.setDeferredStatus('succeeded');else publication.setDeferredStatus('failed', Error.parse(response.error));\n      }, this);\n    }, this);\n    return publication;\n  },\n  _sendMessage: function (message, options, callback, context) {\n    message.id = this._generateMessageId();\n    var timeout = this._advice.timeout ? 1.2 * this._advice.timeout / 1000 : 1.2 * this._dispatcher.retry;\n    this.pipeThroughExtensions('outgoing', message, null, function (message) {\n      if (!message) return;\n      if (callback) this._responseCallbacks[message.id] = [callback, context];\n\n      this._dispatcher.sendMessage(message, timeout, options || {});\n    }, this);\n  },\n  _generateMessageId: function () {\n    this._messageId += 1;\n    if (this._messageId >= Math.pow(2, 32)) this._messageId = 0;\n    return this._messageId.toString(36);\n  },\n  _receiveMessage: function (message) {\n    var id = message.id,\n        callback;\n\n    if (message.successful !== undefined) {\n      callback = this._responseCallbacks[id];\n      delete this._responseCallbacks[id];\n    }\n\n    this.pipeThroughExtensions('incoming', message, null, function (message) {\n      if (!message) return;\n      if (message.advice) this._handleAdvice(message.advice);\n\n      this._deliverMessage(message);\n\n      if (callback) callback[0].call(callback[1], message);\n    }, this);\n  },\n  _handleAdvice: function (advice) {\n    extend(this._advice, advice);\n    this._dispatcher.timeout = this._advice.timeout / 1000;\n\n    if (this._advice.reconnect === this.HANDSHAKE && this._state !== this.DISCONNECTED) {\n      this._state = this.UNCONNECTED;\n      this._dispatcher.clientId = null;\n\n      this._cycleConnection();\n    }\n  },\n  _deliverMessage: function (message) {\n    if (!message.channel || message.data === undefined) return;\n    this.info('Client ? calling listeners for ? with ?', this._dispatcher.clientId, message.channel, message.data);\n\n    this._channels.distributeMessage(message);\n  },\n  _cycleConnection: function () {\n    if (this._connectRequest) {\n      this._connectRequest = null;\n      this.info('Closed connection for ?', this._dispatcher.clientId);\n    }\n\n    var self = this;\n    global.setTimeout(function () {\n      self.connect();\n    }, this._advice.interval);\n  }\n});\nextend(Client.prototype, Deferrable);\nextend(Client.prototype, Publisher);\nextend(Client.prototype, Logging);\nextend(Client.prototype, Extensible);\nmodule.exports = Client;","map":null,"metadata":{},"sourceType":"script"}