{"ast":null,"code":"var errors = require('./errors');\n\nvar Collections = function Collections() {\n  this.initialize.apply(this, arguments);\n};\n\nCollections.prototype = {\n  initialize: function initialize(client, token) {\n    /**\n     * Initialize a feed object\n     * @method intialize\n     * @memberof Collections.prototype\n     * @param {StreamCloudClient} client Stream client this collection is constructed from\n     * @param {string} token JWT token\n     */\n    this.client = client;\n    this.token = token;\n  },\n  buildURL: function buildURL(collection, itemId) {\n    var url = 'collections/' + collection + '/';\n\n    if (itemId === undefined) {\n      return url;\n    }\n\n    return url + itemId + '/';\n  },\n  entry: function entry(collection, itemId, itemData) {\n    return new CollectionEntry(this, collection, itemId, itemData);\n  },\n  get: function get(collection, itemId, callback) {\n    /**\n     * get item from collection\n     * @method get\n     * @memberof Collections.prototype\n     * @param  {string}   collection  collection name\n     * @param  {object}   itemId  id for this entry\n     * @param  {requestCallback} callback Callback to call on completion\n     * @return {Promise} Promise object\n     * @example collection.get(\"food\", \"0c7db91c-67f9-11e8-bcd9-fe00a9219401\")\n     */\n    var self = this;\n    return this.client.get({\n      url: this.buildURL(collection, itemId),\n      signature: this.token\n    }).then(function (response) {\n      var entry = self.client.collections.entry(response.collection, response.id, response.data);\n      entry.full = response;\n\n      if (callback) {\n        callback(entry);\n      }\n\n      return entry;\n    });\n  },\n  add: function add(collection, itemId, itemData, callback) {\n    /**\n     * Add item to collection\n     * @method add\n     * @memberof Collections.prototype\n     * @param  {string}   collection  collection name\n     * @param  {string}   itemId  entry id\n     * @param  {object}   itemData  ObjectStore data\n     * @param  {requestCallback} callback Callback to call on completion\n     * @return {Promise} Promise object\n     * @example collection.add(\"food\", \"cheese101\", {\"name\": \"cheese burger\",\"toppings\": \"cheese\"})\n     */\n    var self = this;\n\n    if (itemId === null) {\n      itemId = undefined;\n    }\n\n    var body = {\n      id: itemId,\n      data: itemData\n    };\n    return this.client.post({\n      url: this.buildURL(collection),\n      body: body,\n      signature: this.token\n    }).then(function (response) {\n      var entry = self.client.collections.entry(response.collection, response.id, response.data);\n      entry.full = response;\n\n      if (callback) {\n        callback(entry);\n      }\n\n      return entry;\n    });\n  },\n  update: function update(collection, entryId, data, callback) {\n    /**\n     * Update entry in the collection\n     * @method update\n     * @memberof Collections.prototype\n     * @param  {string}   collection  collection name\n     * @param  {object}   entryId  Collection object id\n     * @param  {object}   data  ObjectStore data\n     * @param  {requestCallback} callback Callback to call on completion\n     * @return {Promise} Promise object\n     * @example store.update(\"0c7db91c-67f9-11e8-bcd9-fe00a9219401\", {\"name\": \"cheese burger\",\"toppings\": \"cheese\"})\n     * @example store.update(\"food\", \"cheese101\", {\"name\": \"cheese burger\",\"toppings\": \"cheese\"})\n     */\n    var self = this;\n    var body = {\n      data: data\n    };\n    return this.client.put({\n      url: this.buildURL(collection, entryId),\n      body: body,\n      signature: this.token\n    }).then(function (response) {\n      var entry = self.client.collections.entry(response.collection, response.id, response.data);\n      entry.full = response;\n\n      if (callback) {\n        callback(entry);\n      }\n\n      return entry;\n    });\n  },\n  delete: function _delete(collection, entryId, callback) {\n    /**\n     * Delete entry from collection\n     * @method delete\n     * @memberof Collections.prototype\n     * @param  {object}   entryId  Collection entry id\n     * @param  {requestCallback} callback Callback to call on completion\n     * @return {Promise} Promise object\n     * @example collection.delete(\"food\", \"cheese101\")\n     */\n    return this.client['delete']({\n      url: this.buildURL(collection, entryId),\n      signature: this.token\n    }, callback);\n  },\n  upsert: function upsert(collection, data, callback) {\n    /**\n     * Upsert one or more items within a collection.\n     *\n     * @method upsert\n     * @memberof Collections.prototype\n     * @param {object|array} data - A single json object or an array of objects\n     * @param {requestCallback} callback - Callback to call on completion\n     * @return {Promise} Promise object.\n     */\n    if (!this.client.usingApiSecret) {\n      throw new errors.SiteError('This method can only be used server-side using your API Secret');\n    }\n\n    var last = arguments[arguments.length - 1]; // callback is always the last argument\n\n    callback = last.call ? last : undefined;\n\n    if (!Array.isArray(data)) {\n      data = [data];\n    }\n\n    var data_json = {\n      data: {}\n    };\n    data_json['data'][collection] = data;\n    return this.client.post({\n      url: 'collections/',\n      serviceName: 'api',\n      body: data_json,\n      signature: this.client.getCollectionsToken()\n    }, callback);\n  },\n  select: function select(collection, ids, callback) {\n    /**\n     * Select all objects with ids from the collection.\n     *\n     * @method select\n     * @memberof Collections.prototype\n     * @param {object|array} ids - A single json object or an array of objects\n     * @param {requestCallback} callback - Callback to call on completion\n     * @return {Promise} Promise object.\n     */\n    if (!this.client.usingApiSecret) {\n      throw new errors.SiteError('This method can only be used server-side using your API Secret');\n    }\n\n    var last = arguments[arguments.length - 1]; // callback is always the last argument\n\n    callback = last.call ? last : undefined;\n\n    if (!Array.isArray(ids)) {\n      ids = [ids];\n    }\n\n    var params = {\n      foreign_ids: ids.map(function (id) {\n        return collection + ':' + id;\n      }).join(',')\n    };\n    return this.client.get({\n      url: 'collections/',\n      serviceName: 'api',\n      qs: params,\n      signature: this.client.getCollectionsToken()\n    }, callback);\n  },\n  deleteMany: function deleteMany(collection, ids, callback) {\n    /**\n     * Remove all objects by id from the collection.\n     *\n     * @method delete\n     * @memberof Collections.prototype\n     * @param {object|array} ids - A single json object or an array of objects\n     * @param {requestCallback} callback - Callback to call on completion\n     * @return {Promise} Promise object.\n     */\n    if (!this.client.usingApiSecret) {\n      throw new errors.SiteError('This method can only be used server-side using your API Secret');\n    }\n\n    var last = arguments[arguments.length - 1]; // callback is always the last argument\n\n    callback = last.call ? last : undefined;\n\n    if (!Array.isArray(ids)) {\n      ids = [ids];\n    }\n\n    ids = ids.map(function (id) {\n      return id.toString();\n    }).join(',');\n    var params = {\n      collection_name: collection,\n      ids: ids\n    };\n    return this.client.delete({\n      url: 'collections/',\n      serviceName: 'api',\n      qs: params,\n      signature: this.client.getCollectionsToken()\n    }, callback);\n  }\n};\n\nvar CollectionEntry = function CollectionEntry() {\n  this.initialize.apply(this, arguments);\n};\n\nCollectionEntry.prototype = {\n  initialize: function initialize(store, collection, id, data) {\n    this.collection = collection;\n    this.store = store;\n    this.id = id;\n    this.data = data;\n  },\n  _streamRef: function _streamRef() {\n    return \"SO:\".concat(this.collection, \":\").concat(this.id);\n  },\n  get: function get(callback) {\n    var _this = this;\n    /**\n     * get item from collection and sync data\n     * @method get\n     * @memberof CollectionEntry.prototype\n     * @param  {requestCallback} callback Callback to call on completion\n     * @return {Promise} Promise object\n     * @example collection.get(\"0c7db91c-67f9-11e8-bcd9-fe00a9219401\")\n     */\n\n\n    return this.store.get(this.collection, this.id).then(function (response) {\n      _this.data = response.data;\n      _this.full = response;\n\n      if (callback) {\n        callback(response);\n      }\n\n      return response;\n    });\n  },\n  add: function add(callback) {\n    var _this2 = this;\n    /**\n     * Add item to collection\n     * @method add\n     * @memberof CollectionEntry.prototype\n     * @param  {requestCallback} callback Callback to call on completion\n     * @return {Promise} Promise object\n     * @example collection.add(\"cheese101\", {\"name\": \"cheese burger\",\"toppings\": \"cheese\"})\n     */\n\n\n    return this.store.add(this.collection, this.id, this.data).then(function (response) {\n      _this2.data = response.data;\n      _this2.full = response;\n\n      if (callback) {\n        callback(response);\n      }\n\n      return response;\n    });\n  },\n  update: function update(callback) {\n    var _this3 = this;\n    /**\n     * Update item in the object storage\n     * @method update\n     * @memberof CollectionEntry.prototype\n     * @param  {requestCallback} callback Callback to call on completion\n     * @return {Promise} Promise object\n     * @example store.update(\"0c7db91c-67f9-11e8-bcd9-fe00a9219401\", {\"name\": \"cheese burger\",\"toppings\": \"cheese\"})\n     * @example store.update(\"cheese101\", {\"name\": \"cheese burger\",\"toppings\": \"cheese\"})\n     */\n\n\n    return this.store.update(this.collection, this.id, this.data).then(function (response) {\n      _this3.data = response.data;\n      _this3.full = response;\n\n      if (callback) {\n        callback(response);\n      }\n\n      return response;\n    });\n  },\n  delete: function _delete(callback) {\n    var _this4 = this;\n    /**\n     * Delete item from collection\n     * @method delete\n     * @memberof CollectionEntry.prototype\n     * @param  {requestCallback} callback Callback to call on completion\n     * @return {Promise} Promise object\n     * @example collection.delete(\"cheese101\")\n     */\n\n\n    return this.store.delete(this.collection, this.id).then(function (response) {\n      _this4.data = null;\n      _this4.full = null;\n\n      if (callback) {\n        callback(response);\n      }\n\n      return response;\n    });\n  }\n};\nmodule.exports = Collections;","map":null,"metadata":{},"sourceType":"script"}