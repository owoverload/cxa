{"ast":null,"code":"var errors = module.exports;\nvar canCapture = typeof Error.captureStackTrace === 'function';\nvar canStack = !!new Error().stack;\n/**\n * Abstract error object\n * @class ErrorAbstract\n * @access private\n * @param  {string}      [msg]         Error message\n * @param  {function}    constructor\n */\n\nfunction ErrorAbstract(msg, constructor) {\n  this.message = msg;\n  Error.call(this, this.message);\n  /* istanbul ignore else */\n\n  if (canCapture) {\n    Error.captureStackTrace(this, constructor);\n  } else if (canStack) {\n    this.stack = new Error().stack;\n  } else {\n    this.stack = '';\n  }\n}\n\nerrors._Abstract = ErrorAbstract;\nErrorAbstract.prototype = new Error();\n/**\n * FeedError\n * @class FeedError\n * @access private\n * @extends ErrorAbstract\n * @memberof Stream.errors\n * @param {String} [msg] - An error message that will probably end up in a log.\n */\n\nerrors.FeedError = function FeedError(msg) {\n  ErrorAbstract.call(this, msg);\n};\n\nerrors.FeedError.prototype = new ErrorAbstract();\n/**\n * SiteError\n * @class SiteError\n * @access private\n * @extends ErrorAbstract\n * @memberof Stream.errors\n * @param  {string}  [msg]  An error message that will probably end up in a log.\n */\n\nerrors.SiteError = function SiteError(msg) {\n  ErrorAbstract.call(this, msg);\n};\n\nerrors.SiteError.prototype = new ErrorAbstract();\n/**\n * MissingSchemaError\n * @method MissingSchemaError\n * @access private\n * @extends ErrorAbstract\n * @memberof Stream.errors\n * @param  {string} msg\n */\n\nerrors.MissingSchemaError = function MissingSchemaError(msg) {\n  ErrorAbstract.call(this, msg);\n};\n\nerrors.MissingSchemaError.prototype = new ErrorAbstract();\n/**\n * StreamApiError\n * @method StreamApiError\n * @access private\n * @extends ErrorAbstract\n * @memberof Stream.errors\n * @param  {string} msg\n * @param  {object} data\n * @param  {object} response\n */\n\nerrors.StreamApiError = function StreamApiError(msg, data, response) {\n  this.error = data;\n  this.response = response;\n  ErrorAbstract.call(this, msg);\n};\n\nerrors.StreamApiError.prototype = new ErrorAbstract();","map":null,"metadata":{},"sourceType":"script"}