{"ast":null,"code":"var _extends = require(\"@babel/runtime/helpers/extends\");\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\n\nvar Personalization = require('./personalization');\n\nvar request = require('request');\n\nvar StreamFeed = require('./feed');\n\nvar signing = require('./signing');\n\nvar errors = require('./errors');\n\nvar utils = require('./utils');\n\nvar BatchOperations = require('./batch_operations');\n\nvar Promise = require('./promise');\n\nvar qs = require('qs');\n\nvar url = require('url');\n\nvar Faye = require('faye');\n\nvar Collections = require('./collections');\n\nvar StreamFileStore = require('./files');\n\nvar StreamImageStore = require('./images');\n\nvar StreamReaction = require('./reaction');\n\nvar StreamUser = require('./user');\n\nvar jwtDecode = require('jwt-decode');\n\nvar assignIn = require('lodash/assignIn');\n/**\n * @callback requestCallback\n * @param {object} [errors]\n * @param {object} response\n * @param {object} body\n */\n\n\nvar StreamClient = function StreamClient() {\n  /**\n   * Client to connect to Stream api\n   * @class StreamClient\n   */\n  this.initialize.apply(this, arguments);\n};\n\nStreamClient.prototype = {\n  baseUrl: 'https://api.stream-io-api.com/api/',\n  baseAnalyticsUrl: 'https://analytics.stream-io-api.com/analytics/',\n  initialize: function initialize(apiKey, apiSecretOrToken, appId) {\n    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    /**\n     * Initialize a client\n     * @method intialize\n     * @memberof StreamClient.prototype\n     * @param {string} apiKey - the api key\n     * @param {string} [apiSecret] - the api secret\n     * @param {string} [appId] - id of the app\n     * @param {object} [options] - additional options\n     * @param {string} [options.location] - which data center to use\n     * @param {boolean} [options.expireTokens=false] - whether to use a JWT timestamp field (i.e. iat)\n     * @example <caption>initialize is not directly called by via stream.connect, ie:</caption>\n     * stream.connect(apiKey, apiSecret)\n     * @example <caption>secret is optional and only used in server side mode</caption>\n     * stream.connect(apiKey, null, appId);\n     */\n\n    this.apiKey = apiKey;\n    this.usingApiSecret = apiSecretOrToken != null && !signing.isJWT(apiSecretOrToken);\n    this.apiSecret = this.usingApiSecret ? apiSecretOrToken : null;\n    this.userToken = this.usingApiSecret ? null : apiSecretOrToken;\n    this.enrichByDefault = !this.usingApiSecret;\n\n    if (this.userToken != null) {\n      var jwtBody = jwtDecode(this.userToken);\n\n      if (!jwtBody.user_id) {\n        throw new TypeError('user_id is missing in user token');\n      }\n\n      this.userId = jwtBody.user_id;\n      this.currentUser = this.user(this.userId);\n      this.authPayload = jwtBody;\n    }\n\n    this.appId = appId;\n    this.options = options;\n    this.version = this.options.version || 'v1.0';\n    this.fayeUrl = this.options.fayeUrl || 'https://faye.getstream.io/faye';\n    this.fayeClient = null;\n    this.request = request; // track a source name for the api calls, ie get started or databrowser\n\n    this.group = this.options.group || 'unspecified'; // track subscriptions made on feeds created by this client\n\n    this.subscriptions = {};\n    this.expireTokens = this.options.expireTokens ? this.options.expireTokens : false; // which data center to use\n\n    this.location = this.options.location;\n    this.baseUrl = this.getBaseUrl();\n\n    if (typeof process !== 'undefined' && process.env.LOCAL_FAYE) {\n      this.fayeUrl = 'http://localhost:9999/faye/';\n    }\n\n    if (typeof process !== 'undefined' && process.env.STREAM_ANALYTICS_BASE_URL) {\n      this.baseAnalyticsUrl = process.env.STREAM_ANALYTICS_BASE_URL;\n    }\n\n    this.handlers = {};\n    this.browser = typeof this.options.browser !== 'undefined' ? this.options.browser : typeof window !== 'undefined';\n    this.node = !this.browser;\n\n    if (!this.browser) {\n      var keepAlive = this.options.keepAlive;\n\n      if (keepAlive === undefined) {\n        keepAlive = true;\n      }\n\n      var http = require('http');\n\n      var https = require('https');\n\n      var httpsAgent = new https.Agent({\n        keepAlive: keepAlive,\n        keepAliveMsecs: 3000\n      });\n      var httpAgent = new http.Agent({\n        keepAlive: keepAlive,\n        keepAliveMsecs: 3000\n      });\n      this.requestAgent = this.baseUrl.startsWith('https://') ? httpsAgent : httpAgent;\n    }\n\n    this.personalization = new Personalization(this);\n    /* istanbul ignore next */\n\n    if (this.browser && this.usingApiSecret) {\n      throw new errors.FeedError('You are publicly sharing your App Secret. Do not expose the App Secret in browsers, \"native\" mobile apps, or other non-trusted environments.');\n    }\n\n    this.collections = new Collections(this, this.getOrCreateToken());\n    this.files = new StreamFileStore(this, this.getOrCreateToken());\n    this.images = new StreamImageStore(this, this.getOrCreateToken());\n    this.reactions = new StreamReaction(this, this.getOrCreateToken());\n  },\n  getPersonalizationToken: function getPersonalizationToken() {\n    if (this._personalizationToken) {\n      return this._personalizationToken;\n    }\n\n    if (this.apiSecret) {\n      this._personalizationToken = signing.JWTScopeToken(this.apiSecret, 'personalization', '*', {\n        userId: '*',\n        feedId: '*',\n        expireTokens: this.expireTokens\n      });\n    } else {\n      throw new errors.SiteError('Missing secret, which is needed to perform signed requests, use var client = stream.connect(key, secret);');\n    }\n\n    return this._personalizationToken;\n  },\n  getCollectionsToken: function getCollectionsToken() {\n    if (this._collectionsToken) {\n      return this._collectionsToken;\n    }\n\n    if (this.apiSecret) {\n      this._collectionsToken = signing.JWTScopeToken(this.apiSecret, 'collections', '*', {\n        feedId: '*',\n        expireTokens: this.expireTokens\n      });\n    } else {\n      throw new errors.SiteError('Missing secret, which is needed to perform signed requests, use var client = stream.connect(key, secret);');\n    }\n\n    return this._collectionsToken;\n  },\n  getAnalyticsToken: function getAnalyticsToken() {\n    if (this.apiSecret) {\n      return signing.JWTScopeToken(this.apiSecret, 'analytics', '*', {\n        userId: '*',\n        expireTokens: this.expireTokens\n      });\n    } else {\n      throw new errors.SiteError('Missing secret, which is needed to perform signed requests, use var client = stream.connect(key, secret);');\n    }\n  },\n  getBaseUrl: function getBaseUrl(serviceName) {\n    if (!serviceName) {\n      serviceName = 'api';\n    }\n\n    var url = this.baseUrl;\n\n    if (serviceName != 'api') {\n      url = 'https://' + serviceName + '.stream-io-api.com/' + serviceName + '/';\n    }\n\n    if (this.location) {\n      var protocol = this.options.protocol || 'https';\n      url = protocol + '://' + this.location + '-' + serviceName + '.stream-io-api.com/' + serviceName + '/';\n    }\n\n    if (typeof process !== 'undefined' && process.env.LOCAL || this.options.local) {\n      url = 'http://localhost:8000/' + serviceName + '/';\n    }\n\n    var urlEnvironmentKey;\n\n    if (serviceName == 'api') {\n      urlEnvironmentKey = 'STREAM_BASE_URL';\n    } else {\n      urlEnvironmentKey = 'STREAM_' + serviceName.toUpperCase() + '_URL';\n    }\n\n    if (typeof process !== 'undefined' && process.env[urlEnvironmentKey]) {\n      url = process.env[urlEnvironmentKey];\n    }\n\n    if (this.options.urlOverride && this.options.urlOverride[serviceName]) {\n      return this.options.urlOverride[serviceName];\n    }\n\n    return url;\n  },\n  on: function on(event, callback) {\n    /**\n     * Support for global event callbacks\n     * This is useful for generic error and loading handling\n     * @method on\n     * @memberof StreamClient.prototype\n     * @param {string} event - Name of the event\n     * @param {function} callback - Function that is called when the event fires\n     * @example\n     * client.on('request', callback);\n     * client.on('response', callback);\n     */\n    this.handlers[event] = callback;\n  },\n  off: function off(key) {\n    /**\n     * Remove one or more event handlers\n     * @method off\n     * @memberof StreamClient.prototype\n     * @param {string} [key] - Name of the handler\n     * @example\n     * client.off() removes all handlers\n     * client.off(name) removes the specified handler\n     */\n    if (key === undefined) {\n      this.handlers = {};\n    } else {\n      delete this.handlers[key];\n    }\n  },\n  send: function send() {\n    /**\n     * Call the given handler with the arguments\n     * @method send\n     * @memberof StreamClient.prototype\n     * @access private\n     */\n    var args = Array.prototype.slice.call(arguments);\n    var key = args[0];\n    args = args.slice(1);\n\n    if (this.handlers[key]) {\n      this.handlers[key].apply(this, args);\n    }\n  },\n  wrapPromiseTask: function wrapPromiseTask(cb, fulfill, reject) {\n    /**\n     * Wrap a task to be used as a promise\n     * @method wrapPromiseTask\n     * @memberof StreamClient.prototype\n     * @private\n     * @param {requestCallback} cb\n     * @param {function} fulfill\n     * @param {function} reject\n     * @return {function}\n     */\n    var client = this;\n    var callback = this.wrapCallback(cb);\n    return function task(error, response, body) {\n      if (error) {\n        reject(new errors.StreamApiError(error, body, response));\n      } else if (!/^2/.test('' + response.statusCode)) {\n        reject(new errors.StreamApiError(JSON.stringify(body) + ' with HTTP status code ' + response.statusCode, body, response));\n      } else {\n        fulfill(body);\n      }\n\n      callback.call(client, error, response, body);\n    };\n  },\n  wrapCallback: function wrapCallback(cb) {\n    /**\n     * Wrap callback for HTTP request\n     * @method wrapCallBack\n     * @memberof StreamClient.prototype\n     * @access private\n     */\n    var client = this;\n\n    function callback() {\n      // first hit the global callback, subsequently forward\n      var args = Array.prototype.slice.call(arguments);\n      var sendArgs = ['response'].concat(args);\n      client.send.apply(client, sendArgs);\n\n      if (cb !== undefined) {\n        cb.apply(client, args);\n      }\n    }\n\n    return callback;\n  },\n  userAgent: function userAgent() {\n    /**\n     * Get the current user agent\n     * @method userAgent\n     * @memberof StreamClient.prototype\n     * @return {string} current user agent\n     */\n    var description = this.node ? 'node' : 'browser'; // TODO: get the version here in a way which works in both and browserify\n\n    var version = 'unknown';\n    return 'stream-javascript-client-' + description + '-' + version;\n  },\n  getReadOnlyToken: function getReadOnlyToken(feedSlug, userId) {\n    /**\n     * Returns a token that allows only read operations\n     *\n     * @method getReadOnlyToken\n     * @memberof StreamClient.prototype\n     * @param {string} feedSlug - The feed slug to get a read only token for\n     * @param {string} userId - The user identifier\n     * @return {string} token\n     * @example\n     * client.getReadOnlyToken('user', '1');\n     */\n    return this.feed(feedSlug, userId).getReadOnlyToken();\n  },\n  getReadWriteToken: function getReadWriteToken(feedSlug, userId) {\n    /**\n     * Returns a token that allows read and write operations\n     *\n     * @method getReadWriteToken\n     * @memberof StreamClient.prototype\n     * @param {string} feedSlug - The feed slug to get a read only token for\n     * @param {string} userId - The user identifier\n     * @return {string} token\n     * @example\n     * client.getReadWriteToken('user', '1');\n     */\n    return this.feed(feedSlug, userId).getReadWriteToken();\n  },\n  feed: function feed(feedSlug) {\n    var userId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.userId;\n    var token = arguments.length > 2 ? arguments[2] : undefined;\n    /**\n     * Returns a feed object for the given feed id and token\n     * @method feed\n     * @memberof StreamClient.prototype\n     * @param {string} feedSlug - The feed slug\n     * @param {string} userId - The user identifier\n     * @param {string} [token] - The token (DEPRECATED)\n     * @return {StreamFeed}\n     * @example\n     * client.feed('user', '1');\n     */\n\n    if (token === undefined) {\n      if (this.usingApiSecret) {\n        token = signing.JWTScopeToken(this.apiSecret, '*', '*', {\n          feedId: '' + feedSlug + userId\n        });\n      } else {\n        token = this.userToken;\n      }\n    }\n\n    if (userId instanceof StreamUser) {\n      userId = userId.id;\n    }\n\n    var feed = new StreamFeed(this, feedSlug, userId, token);\n    return feed;\n  },\n  enrichUrl: function enrichUrl(relativeUrl, serviceName) {\n    /**\n     * Combines the base url with version and the relative url\n     * @method enrichUrl\n     * @memberof StreamClient.prototype\n     * @private\n     * @param {string} relativeUrl\n     */\n    if (!serviceName) {\n      serviceName = 'api';\n    }\n\n    var base_url = this.getBaseUrl(serviceName);\n    var url = base_url + this.version + '/' + relativeUrl;\n    return url;\n  },\n  replaceReactionOptions: function replaceReactionOptions(options) {\n    // Shortcut options for reaction enrichment\n    if (options && options.reactions) {\n      if (options.reactions.own != null) {\n        options.withOwnReactions = options.reactions.own;\n      }\n\n      if (options.reactions.recent != null) {\n        options.withRecentReactions = options.reactions.recent;\n      }\n\n      if (options.reactions.counts != null) {\n        options.withReactionCounts = options.reactions.counts;\n      }\n\n      if (options.reactions.own_children != null) {\n        options.withOwnChildren = options.reactions.own_children;\n      }\n\n      delete options.reactions;\n    }\n  },\n  shouldUseEnrichEndpoint: function shouldUseEnrichEndpoint(options) {\n    if (options && options.enrich) {\n      var result = options.enrich;\n      delete options.enrich;\n      return result;\n    }\n\n    return this.enrichByDefault || options.ownReactions != null || options.withRecentReactions != null || options.withReactionCounts != null || options.withOwnChildren != null;\n  },\n  enrichKwargs: function enrichKwargs(kwargs) {\n    /**\n     * Adds the API key and the signature\n     * @method enrichKwargs\n     * @memberof StreamClient.prototype\n     * @param {object} kwargs\n     * @private\n     */\n    kwargs.url = this.enrichUrl(kwargs.url, kwargs.serviceName);\n\n    if (kwargs.qs === undefined) {\n      kwargs.qs = {};\n    }\n\n    if (!this.browser) {\n      kwargs.agent = this.requestAgent;\n    }\n\n    kwargs.qs['api_key'] = this.apiKey;\n    kwargs.qs.location = this.group;\n    kwargs.json = true;\n    var signature = kwargs.signature || this.signature;\n    kwargs.headers = {}; // auto-detect authentication type and set HTTP headers accordingly\n\n    if (signing.isJWTSignature(signature)) {\n      kwargs.headers['stream-auth-type'] = 'jwt';\n      signature = signature.split(' ').reverse()[0];\n    } else {\n      kwargs.headers['stream-auth-type'] = 'simple';\n    }\n\n    kwargs.timeout = 10 * 1000; // 10 seconds\n\n    kwargs.headers.Authorization = signature;\n    kwargs.headers['X-Stream-Client'] = this.userAgent(); // Make sure withCredentials is not enabled, different browser\n    // fallbacks handle it differently by default (meteor)\n\n    kwargs.withCredentials = false;\n    return kwargs;\n  },\n  getFayeAuthorization: function getFayeAuthorization() {\n    /**\n     * Get the authorization middleware to use Faye with getstream.io\n     * @method getFayeAuthorization\n     * @memberof StreamClient.prototype\n     * @private\n     * @return {object} Faye authorization middleware\n     */\n    var apiKey = this.apiKey,\n        self = this;\n    return {\n      incoming: function incoming(message, callback) {\n        callback(message);\n      },\n      outgoing: function outgoing(message, callback) {\n        if (message.subscription && self.subscriptions[message.subscription]) {\n          var subscription = self.subscriptions[message.subscription];\n          message.ext = {\n            user_id: subscription.userId,\n            api_key: apiKey,\n            signature: subscription.token\n          };\n        }\n\n        callback(message);\n      }\n    };\n  },\n  getFayeClient: function getFayeClient() {\n    /**\n     * Returns this client's current Faye client\n     * @method getFayeClient\n     * @memberof StreamClient.prototype\n     * @private\n     * @return {object} Faye client\n     */\n    if (this.fayeClient === null) {\n      this.fayeClient = new Faye.Client(this.fayeUrl, {\n        timeout: 10\n      });\n      var authExtension = this.getFayeAuthorization();\n      this.fayeClient.addExtension(authExtension);\n    }\n\n    return this.fayeClient;\n  },\n  get: function get(kwargs, cb) {\n    /**\n     * Shorthand function for get request\n     * @method get\n     * @memberof StreamClient.prototype\n     * @private\n     * @param  {object}   kwargs\n     * @param  {requestCallback} cb     Callback to call on completion\n     * @return {Promise}                Promise object\n     */\n    return new Promise(function (fulfill, reject) {\n      this.send('request', 'get', kwargs, cb);\n      kwargs = this.enrichKwargs(kwargs);\n      kwargs.method = 'GET';\n      kwargs.gzip = true;\n      var callback = this.wrapPromiseTask(cb, fulfill, reject);\n      this.request(kwargs, callback);\n    }.bind(this));\n  },\n  post: function post(kwargs, cb) {\n    /**\n     * Shorthand function for post request\n     * @method post\n     * @memberof StreamClient.prototype\n     * @private\n     * @param  {object}   kwargs\n     * @param  {requestCallback} cb     Callback to call on completion\n     * @return {Promise}                Promise object\n     */\n    return new Promise(function (fulfill, reject) {\n      this.send('request', 'post', kwargs, cb);\n      kwargs = this.enrichKwargs(kwargs);\n      kwargs.method = 'POST';\n      kwargs.gzip = true;\n      var callback = this.wrapPromiseTask(cb, fulfill, reject);\n      this.request(kwargs, callback);\n    }.bind(this));\n  },\n  delete: function _delete(kwargs, cb) {\n    /**\n     * Shorthand function for delete request\n     * @method delete\n     * @memberof StreamClient.prototype\n     * @private\n     * @param  {object}   kwargs\n     * @param  {requestCallback} cb     Callback to call on completion\n     * @return {Promise}                Promise object\n     */\n    return new Promise(function (fulfill, reject) {\n      this.send('request', 'delete', kwargs, cb);\n      kwargs = this.enrichKwargs(kwargs);\n      kwargs.gzip = true;\n      kwargs.method = 'DELETE';\n      var callback = this.wrapPromiseTask(cb, fulfill, reject);\n      this.request(kwargs, callback);\n    }.bind(this));\n  },\n  put: function put(kwargs, cb) {\n    /**\n     * Shorthand function for put request\n     * @method put\n     * @memberof StreamClient.prototype\n     * @private\n     * @param  {object}   kwargs\n     * @param  {requestCallback} cb     Callback to call on completion\n     * @return {Promise}                Promise object\n     */\n    return new Promise(function (fulfill, reject) {\n      this.send('request', 'put', kwargs, cb);\n      kwargs = this.enrichKwargs(kwargs);\n      kwargs.method = 'PUT';\n      kwargs.gzip = true;\n      var callback = this.wrapPromiseTask(cb, fulfill, reject);\n      this.request(kwargs, callback);\n    }.bind(this));\n  },\n\n  /**\n   * Deprecated: use createUserToken instead\n   * @param {string} userId\n   * @param {object} extraData\n   */\n  createUserSessionToken: function createUserSessionToken(userId) {\n    var extraData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!this.usingApiSecret || this.apiKey == null) {\n      throw new errors.FeedError('In order to create user tokens you need to initialize the API client with your API Secret');\n    }\n\n    return signing.JWTUserSessionToken(this.apiSecret, userId, extraData, {\n      noTimestamp: !this.expireTokens\n    });\n  },\n  createUserToken: function createUserToken(userId) {\n    var extraData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.createUserSessionToken(userId, extraData);\n  },\n  updateActivities: function updateActivities(activities, callback) {\n    /**\n     * Updates all supplied activities on the getstream-io api\n     * @since  3.1.0\n     * @param  {array} activities list of activities to update\n     * @return {Promise}\n     */\n    if (!this.usingApiSecret || this.apiKey == null) {\n      throw new errors.SiteError('This method can only be used server-side using your API Secret');\n    }\n\n    if (!(activities instanceof Array)) {\n      throw new TypeError('The activities argument should be an Array');\n    }\n\n    var authToken = signing.JWTScopeToken(this.apiSecret, 'activities', '*', {\n      feedId: '*',\n      expireTokens: this.expireTokens\n    });\n    var data = {\n      activities: activities\n    };\n    return this.post({\n      url: 'activities/',\n      body: data,\n      signature: authToken\n    }, callback);\n  },\n  updateActivity: function updateActivity(activity, callback) {\n    /**\n     * Updates one activity on the getstream-io api\n     * @since  3.1.0\n     * @param  {object} activity The activity to update\n     * @return {Promise}\n     */\n    if (!this.usingApiSecret || this.apiKey == null) {\n      throw new errors.SiteError('This method can only be used server-side using your API Secret');\n    }\n\n    return this.updateActivities([activity], callback);\n  },\n  getActivities: function getActivities(params, callback) {\n    /**\n     * Retrieve activities by ID or foreign ID and time\n     * @since  3.19.0\n     * @param  {object} params object containing either the list of activity IDs as {ids: ['...', ...]} or foreign IDs and time as {foreignIDTimes: [{foreignID: ..., time: ...}, ...]}\n     * @return {Promise}\n     */\n    var ids = params.ids,\n        foreignIDTimes = params.foreignIDTimes,\n        qs = _objectWithoutProperties(params, [\"ids\", \"foreignIDTimes\"]);\n\n    if (ids) {\n      if (!(ids instanceof Array)) {\n        throw new TypeError('The ids argument should be an Array');\n      }\n\n      qs['ids'] = ids.join(',');\n    } else if (foreignIDTimes) {\n      if (!(foreignIDTimes instanceof Array)) {\n        throw new TypeError('The foreignIDTimes argument should be an Array');\n      }\n\n      var foreignIDs = [];\n      var timestamps = [];\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = foreignIDTimes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var fidTime = _step.value;\n\n          if (!(fidTime instanceof Object)) {\n            throw new TypeError('foreignIDTimes elements should be Objects');\n          }\n\n          foreignIDs.push(fidTime.foreignID);\n          timestamps.push(fidTime.time);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      qs['foreign_ids'] = foreignIDs.join(',');\n      qs['timestamps'] = timestamps.join(',');\n    } else {\n      throw new TypeError('Missing ids or foreignIDTimes params');\n    }\n\n    var token;\n\n    if (this.usingApiSecret) {\n      token = signing.JWTScopeToken(this.apiSecret, 'activities', '*', {\n        feedId: '*',\n        expireTokens: this.expireTokens\n      });\n    } else {\n      token = this.userToken;\n    }\n\n    var path;\n    this.replaceReactionOptions(qs);\n\n    if (this.shouldUseEnrichEndpoint(qs)) {\n      path = 'enrich/activities/';\n    } else {\n      path = 'activities/';\n    }\n\n    return this.get({\n      url: path,\n      qs: qs,\n      signature: token\n    }, callback);\n  },\n  getOrCreateToken: function getOrCreateToken() {\n    return this.usingApiSecret ? signing.JWTScopeToken(this.apiSecret, '*', '*', {\n      feedId: '*'\n    }) : this.userToken;\n  },\n  user: function user(userId) {\n    return new StreamUser(this, userId, this.getOrCreateToken());\n  },\n  setUser: function setUser(data) {\n    var _this = this;\n\n    if (this.usingApiSecret) {\n      throw new errors.SiteError('This method can only be used client-side using a user token');\n    }\n\n    var body = _extends(data);\n\n    delete body.id;\n    return this.currentUser.getOrCreate(body).then(function (user) {\n      _this.currentUser = user;\n      return user;\n    });\n  },\n  og: function og(url) {\n    return this.get({\n      url: 'og/',\n      qs: {\n        url: url\n      },\n      signature: this.getOrCreateToken()\n    });\n  },\n  personalizedFeed: function personalizedFeed() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var callback = arguments.length > 1 ? arguments[1] : undefined;\n    return this.get({\n      url: 'enrich/personalization/feed/',\n      qs: options,\n      signature: this.getOrCreateToken()\n    }, callback);\n  },\n  activityPartialUpdate: function activityPartialUpdate(data, callback) {\n    /**\n     * Update a single activity with partial operations.\n     * @since 3.20.0\n     * @param {object} data object containing either the ID or the foreign ID and time of the activity and the operations to issue as set:{...} and unset:[...].\n     * @return {Promise}\n     * @example\n     * client.activityPartialUpdate({\n     *   id: \"54a60c1e-4ee3-494b-a1e3-50c06acb5ed4\",\n     *   set: {\n     *     \"product.price\": 19.99,\n     *     \"shares\": {\n     *       \"facebook\": \"...\",\n     *       \"twitter\": \"...\",\n     *     }\n     *   },\n     *   unset: [\n     *     \"daily_likes\",\n     *     \"popularity\"\n     *   ]\n     * })\n     * @example\n     * client.activityPartialUpdate({\n     *   foreignID: \"product:123\",\n     *   time: \"2016-11-10T13:20:00.000000\",\n     *   set: {\n     *     ...\n     *   },\n     *   unset: [\n     *     ...\n     *   ]\n     * })\n     */\n    return this.activitiesPartialUpdate([data], callback).then(function (response) {\n      var activity = response.activities[0];\n      delete response.activities;\n      assignIn(activity, response);\n      return activity;\n    });\n  },\n  activitiesPartialUpdate: function activitiesPartialUpdate(changes, callback) {\n    /**\n     * Update multiple activities with partial operations.\n     * @since\n     * @param {array} changes array containing the changesets to be applied. Every changeset contains the activity identifier which is either the ID or the pair of of foreign ID and time of the activity. The operations to issue can be set:{...} and unset:[...].\n     * @return {Promise}\n     * @xample\n     * client.activitiesPartialUpdate([\n     *   {\n     *     id: \"4b39fda2-d6e2-42c9-9abf-5301ef071b12\",\n     *     set: {\n     *       \"product.price.eur\": 12.99,\n     *       \"colors\": {\n     *         \"blue\": \"#0000ff\",\n     *         \"green\": \"#00ff00\",\n     *       },\n     *     },\n     *     unset: [ \"popularity\", \"size.x2\" ],\n     *   },\n     *   {\n     *     id: \"8d2dcad8-1e34-11e9-8b10-9cb6d0925edd\",\n     *     set: {\n     *       \"product.price.eur\": 17.99,\n     *       \"colors\": {\n     *         \"red\": \"#ff0000\",\n     *         \"green\": \"#00ff00\",\n     *       },\n     *     },\n     *     unset: [ \"rating\" ],\n     *   },\n     * ])\n     * @example\n     * client.activitiesPartialUpdate([\n     *   {\n     *     foreignID: \"product:123\",\n     *     time: \"2016-11-10T13:20:00.000000\",\n     *     set: {\n     *       ...\n     *     },\n     *     unset: [\n     *       ...\n     *     ]\n     *   },\n     *   {\n     *     foreignID: \"product:321\",\n     *     time: \"2016-11-10T13:20:00.000000\",\n     *     set: {\n     *       ...\n     *     },\n     *     unset: [\n     *       ...\n     *     ]\n     *   },\n     * ])\n     */\n    if (!(changes instanceof Array)) {\n      throw new TypeError('changes should be an Array');\n    }\n\n    changes.forEach(function (item) {\n      if (!(item instanceof Object)) {\n        throw new TypeError(\"changeset should be and Object\");\n      }\n\n      if (item.foreignID) {\n        item.foreign_id = item.foreignID;\n      }\n\n      if (item.id === undefined && (item.foreign_id === undefined || item.time === undefined)) {\n        throw new TypeError('missing id or foreign ID and time');\n      }\n\n      if (item.set && !(item.set instanceof Object)) {\n        throw new TypeError('set field should be an Object');\n      }\n\n      if (item.unset && !(item.unset instanceof Array)) {\n        throw new TypeError('unset field should be an Array');\n      }\n    });\n    var authToken;\n\n    if (this.usingApiSecret) {\n      authToken = signing.JWTScopeToken(this.apiSecret, 'activities', '*', {\n        feedId: '*',\n        expireTokens: this.expireTokens\n      });\n    } else {\n      authToken = this.userToken;\n    }\n\n    return this.post({\n      url: 'activity/',\n      body: {\n        changes: changes\n      },\n      signature: authToken\n    }, callback);\n  }\n};\nStreamClient.prototype.collection = StreamClient.prototype.collections;\n\nif (qs) {\n  StreamClient.prototype.createRedirectUrl = function (targetUrl, userId, events) {\n    /**\n     * Creates a redirect url for tracking the given events in the context of\n     * an email using Stream's analytics platform. Learn more at\n     * getstream.io/personalization\n     * @method createRedirectUrl\n     * @memberof StreamClient.prototype\n     * @param  {string} targetUrl Target url\n     * @param  {string} userId    User id to track\n     * @param  {array} events     List of events to track\n     * @return {string}           The redirect url\n     */\n    var uri = url.parse(targetUrl);\n\n    if (!(uri.host || uri.hostname && uri.port) && !uri.isUnix) {\n      throw new errors.MissingSchemaError('Invalid URI: \"' + url.format(uri) + '\"');\n    }\n\n    var authToken = signing.JWTScopeToken(this.apiSecret, 'redirect_and_track', '*', {\n      userId: '*',\n      expireTokens: this.expireTokens\n    });\n    var analyticsUrl = this.baseAnalyticsUrl + 'redirect/';\n    var kwargs = {\n      auth_type: 'jwt',\n      authorization: authToken,\n      url: targetUrl,\n      api_key: this.apiKey,\n      events: JSON.stringify(events)\n    };\n    var qString = utils.rfc3986(qs.stringify(kwargs, null, null, {}));\n    return analyticsUrl + '?' + qString;\n  };\n} // If we are in a node environment and batchOperations is available add the methods to the prototype of StreamClient\n\n\nif (BatchOperations) {\n  for (var key in BatchOperations) {\n    if (BatchOperations.hasOwnProperty(key)) {\n      StreamClient.prototype[key] = BatchOperations[key];\n    }\n  }\n}\n\nmodule.exports = StreamClient;","map":null,"metadata":{},"sourceType":"script"}