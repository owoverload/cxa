{"ast":null,"code":"/**\n * The MIT License (MIT)\n *\n * Copyright (c) 2017 Jakub Bene≈° <benes@webscope.io>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport ReactDOM from 'react-dom';\nimport getCaretCoordinates from 'textarea-caret';\nimport CustomEvent from 'custom-event';\nimport React from 'react';\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _typeof2(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof2 = function _typeof2(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof2 = function _typeof2(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof2(obj);\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return _typeof2(obj);\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nvar KEY_CODES = {\n  ESC: 27,\n  UP: 38,\n  DOWN: 40,\n  LEFT: 37,\n  RIGHT: 39,\n  ENTER: 13,\n  TAB: 9\n}; // This is self-made key shortcuts manager, used for caching key strokes\n\nvar Listener = function Listener() {\n  var _this = this;\n\n  _classCallCheck(this, Listener);\n\n  this.startListen = function (ref) {\n    if (!ref) return;\n    ref.addEventListener(\"keydown\", _this.f);\n  };\n\n  this.stopListen = function (ref) {\n    if (!ref) return;\n    ref.removeEventListener(\"keydown\", _this.f);\n  };\n\n  this.add = function (keyCodes, fn) {\n    var keyCode = keyCodes;\n    if (typeof keyCode !== \"object\") keyCode = [keyCode];\n    _this.listeners[_this.index] = {\n      keyCode: keyCode,\n      fn: fn\n    };\n    return _this.index++;\n  };\n\n  this.remove = function (id) {\n    delete _this.listeners[id];\n  };\n\n  this.removeAll = function () {\n    _this.listeners = {};\n    _this.index = 1;\n  };\n\n  this.index = 1;\n  this.listeners = {};\n\n  this.f = function (e) {\n    if (!e) return;\n    var code = e.keyCode || e.which;\n    Object.values(_this.listeners).forEach(function (_ref) {\n      var keyCode = _ref.keyCode,\n          fn = _ref.fn;\n\n      if (keyCode.includes(code)) {\n        e.stopPropagation();\n        e.preventDefault();\n        fn(e);\n      }\n    });\n  };\n};\n\nvar Listeners = new Listener();\n\nvar Item =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Item, _React$Component);\n\n  function Item() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Item);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Item)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.selectItem = function () {\n      var _this$props = _this.props,\n          item = _this$props.item,\n          onSelectHandler = _this$props.onSelectHandler;\n      onSelectHandler(item);\n    };\n\n    return _this;\n  }\n\n  _createClass(Item, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps) {\n      if (this.props.item !== nextProps.item || this.props.selected !== nextProps.selected || this.props.style !== nextProps.style || this.props.className !== nextProps.className) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          Component = _this$props2.component,\n          style = _this$props2.style,\n          onClickHandler = _this$props2.onClickHandler,\n          item = _this$props2.item,\n          selected = _this$props2.selected,\n          className = _this$props2.className,\n          innerRef = _this$props2.innerRef;\n      return React.createElement(\"li\", {\n        className: \"rta__item  \".concat(selected === true ? \"rta__item--selected\" : \"\", \" \").concat(className || \"\"),\n        style: style\n      }, React.createElement(\"div\", {\n        className: \"rta__entity \".concat(selected === true ? \"rta__entity--selected\" : \"\"),\n        role: \"button\",\n        tabIndex: 0,\n        onClick: onClickHandler,\n        onFocus: this.selectItem,\n        onMouseEnter: this.selectItem,\n        onTouchStart: function onTouchStart() {\n          _this2.clicked = true;\n\n          _this2.selectItem();\n        },\n        onTouchEnd: function onTouchEnd(e) {\n          e.preventDefault();\n\n          if (_this2.clicked) {\n            onClickHandler(e);\n          }\n        },\n        onTouchMove: function onTouchMove() {\n          _this2.clicked = false;\n        },\n        onTouchCancel: function onTouchCancel() {\n          _this2.clicked = false;\n        }\n        /* $FlowFixMe */\n        ,\n        ref: innerRef\n      }, React.createElement(Component, {\n        selected: selected,\n        entity: item\n      })));\n    }\n  }]);\n\n  return Item;\n}(React.Component);\n\nvar List =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(List, _React$Component);\n\n  function List() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, List);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(List)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      selectedItem: null\n    };\n\n    _this.onPressEnter = function (e) {\n      if (typeof e !== \"undefined\") {\n        e.preventDefault();\n      }\n\n      var values = _this.props.values;\n\n      _this.modifyText(values[_this.getPositionInList()]);\n    };\n\n    _this.getPositionInList = function () {\n      var values = _this.props.values;\n      var selectedItem = _this.state.selectedItem;\n      if (!selectedItem) return 0;\n      return values.findIndex(function (a) {\n        return _this.getId(a) === _this.getId(selectedItem);\n      });\n    };\n\n    _this.getId = function (item) {\n      var textToReplace = _this.props.getTextToReplace(item);\n\n      if (textToReplace) {\n        if (textToReplace.key) {\n          return textToReplace.key;\n        }\n\n        if (typeof item === \"string\" || !item.key) {\n          return textToReplace.text;\n        }\n      }\n\n      if (!item.key) {\n        throw new Error(\"Item \".concat(JSON.stringify(item), \" has to have defined \\\"key\\\" property\"));\n      } // $FlowFixMe\n\n\n      return item.key;\n    };\n\n    _this.listeners = [];\n    _this.itemsRef = {};\n\n    _this.modifyText = function (value) {\n      if (!value) return;\n      var _this$props = _this.props,\n          onSelect = _this$props.onSelect,\n          getTextToReplace = _this$props.getTextToReplace;\n      onSelect(getTextToReplace(value));\n    };\n\n    _this.selectItem = function (item) {\n      var keyboard = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (_this.state.selectedItem === item) return;\n\n      _this.setState({\n        selectedItem: item\n      }, function () {\n        if (keyboard) {\n          _this.props.dropdownScroll(_this.itemsRef[_this.getId(item)]);\n        }\n      });\n    };\n\n    _this.scroll = function (e) {\n      e.preventDefault();\n      var values = _this.props.values;\n      var code = e.keyCode || e.which;\n\n      var oldPosition = _this.getPositionInList();\n\n      var newPosition;\n\n      switch (code) {\n        case KEY_CODES.DOWN:\n          newPosition = oldPosition + 1;\n          break;\n\n        case KEY_CODES.UP:\n          newPosition = oldPosition - 1;\n          break;\n\n        default:\n          newPosition = oldPosition;\n          break;\n      }\n\n      newPosition = (newPosition % values.length + values.length) % values.length; // eslint-disable-line\n\n      _this.selectItem(values[newPosition], [KEY_CODES.DOWN, KEY_CODES.UP].includes(code));\n    };\n\n    _this.isSelected = function (item) {\n      var selectedItem = _this.state.selectedItem;\n      if (!selectedItem) return false;\n      return _this.getId(selectedItem) === _this.getId(item);\n    };\n\n    return _this;\n  }\n\n  _createClass(List, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.listeners.push(Listeners.add([KEY_CODES.DOWN, KEY_CODES.UP], this.scroll), Listeners.add([KEY_CODES.ENTER, KEY_CODES.TAB], this.onPressEnter));\n      var values = this.props.values;\n      if (values && values[0]) this.selectItem(values[0]);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(_ref) {\n      var _this2 = this;\n\n      var oldValues = _ref.values;\n      var values = this.props.values;\n      var oldValuesSerialized = oldValues.map(function (val) {\n        return _this2.getId(val);\n      }).join(\"\");\n      var newValuesSerialized = values.map(function (val) {\n        return _this2.getId(val);\n      }).join(\"\");\n\n      if (oldValuesSerialized !== newValuesSerialized && values && values[0]) {\n        this.selectItem(values[0]);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var listener;\n\n      while (this.listeners.length) {\n        listener = this.listeners.pop();\n        Listeners.remove(listener);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$props2 = this.props,\n          values = _this$props2.values,\n          component = _this$props2.component,\n          style = _this$props2.style,\n          itemClassName = _this$props2.itemClassName,\n          className = _this$props2.className,\n          itemStyle = _this$props2.itemStyle;\n      return React.createElement(\"ul\", {\n        className: \"rta__list \".concat(className || \"\"),\n        style: style\n      }, values.map(function (item) {\n        return React.createElement(Item, {\n          key: _this3.getId(item),\n          innerRef: function innerRef(ref) {\n            _this3.itemsRef[_this3.getId(item)] = ref;\n          },\n          selected: _this3.isSelected(item),\n          item: item,\n          className: itemClassName,\n          style: itemStyle,\n          onClickHandler: _this3.onPressEnter,\n          onSelectHandler: _this3.selectItem,\n          component: component\n        });\n      }));\n    }\n  }]);\n\n  return List;\n}(React.Component);\n\nfunction defaultScrollToItem(container, item) {\n  var itemHeight = parseInt(getComputedStyle(item).getPropertyValue(\"height\"), 10);\n  var containerHight = parseInt(getComputedStyle(container).getPropertyValue(\"height\"), 10) - itemHeight;\n  var itemOffsetTop = item.offsetTop;\n  var actualScrollTop = container.scrollTop;\n\n  if (itemOffsetTop < actualScrollTop + containerHight && actualScrollTop < itemOffsetTop) {\n    return;\n  } // eslint-disable-next-line\n\n\n  container.scrollTop = itemOffsetTop;\n}\n\nvar DEFAULT_CARET_POSITION = \"next\";\nvar POSITION_CONFIGURATION = {\n  X: {\n    LEFT: \"rta__autocomplete--left\",\n    RIGHT: \"rta__autocomplete--right\"\n  },\n  Y: {\n    TOP: \"rta__autocomplete--top\",\n    BOTTOM: \"rta__autocomplete--bottom\"\n  }\n};\n\nvar errorMessage = function errorMessage(message) {\n  return console.error(\"RTA: dataProvider fails: \".concat(message, \"\\n    \\nCheck the documentation or create issue if you think it's bug. https://github.com/webscopeio/react-textarea-autocomplete/issues\"));\n}; // The main purpose of this component is to figure out to which side the autocomplete should be opened\n\n\nvar Autocomplete =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Autocomplete, _React$Component);\n\n  function Autocomplete() {\n    _classCallCheck(this, Autocomplete);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Autocomplete).apply(this, arguments));\n  }\n\n  _createClass(Autocomplete, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var boundariesElement = this.props.boundariesElement;\n\n      if (typeof boundariesElement === \"string\") {\n        var elem = document.querySelector(boundariesElement);\n\n        if (!elem) {\n          throw new Error(\"RTA: Invalid prop boundariesElement: it has to be string or HTMLElement.\");\n        }\n\n        this.containerElem = elem;\n      } else if (boundariesElement instanceof HTMLElement) {\n        this.containerElem = boundariesElement;\n      } else {\n        throw new Error(\"RTA: Invalid prop boundariesElement: it has to be string or HTMLElement.\");\n      }\n\n      if (!this.containerElem || !this.containerElem.contains(this.ref)) {\n        if (process.env.NODE_ENV !== \"test\") {\n          throw new Error(\"RTA: Invalid prop boundariesElement: it has to be one of the parents of the RTA.\");\n        }\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var _this$ref$classList, _this$ref$classList2;\n\n      var top = this.props.top || 0;\n      var left = this.props.left || 0;\n      var usedClasses = [];\n      var unusedClasses = [];\n      var topPosition = 0;\n      var leftPosition = 0;\n      var containerBounds = this.containerElem.getBoundingClientRect();\n      var dropdownBounds = this.ref.getBoundingClientRect();\n      var textareaBounds = this.props.textareaRef.getBoundingClientRect();\n      var computedStyle = window.getComputedStyle(this.ref);\n      var marginTop = parseInt(computedStyle.getPropertyValue(\"margin-top\"), 10);\n      var marginBottom = parseInt(computedStyle.getPropertyValue(\"margin-bottom\"), 10);\n      var marginLeft = parseInt(computedStyle.getPropertyValue(\"margin-left\"), 10);\n      var marginRight = parseInt(computedStyle.getPropertyValue(\"margin-right\"), 10);\n      var dropdownBottom = marginTop + marginBottom + textareaBounds.top + top + dropdownBounds.height;\n      var dropdownRight = marginLeft + marginRight + textareaBounds.left + left + dropdownBounds.width;\n\n      if (dropdownRight > containerBounds.right) {\n        leftPosition = left - dropdownBounds.width;\n        usedClasses.push(POSITION_CONFIGURATION.X.LEFT);\n        unusedClasses.push(POSITION_CONFIGURATION.X.RIGHT);\n      } else {\n        leftPosition = left;\n        usedClasses.push(POSITION_CONFIGURATION.X.RIGHT);\n        unusedClasses.push(POSITION_CONFIGURATION.X.LEFT);\n      }\n\n      if (dropdownBottom > containerBounds.bottom) {\n        topPosition = top - dropdownBounds.height;\n        usedClasses.push(POSITION_CONFIGURATION.Y.TOP);\n        unusedClasses.push(POSITION_CONFIGURATION.Y.BOTTOM);\n      } else {\n        topPosition = top;\n        usedClasses.push(POSITION_CONFIGURATION.Y.BOTTOM);\n        unusedClasses.push(POSITION_CONFIGURATION.Y.TOP);\n      }\n\n      if (this.props.renderToBody) {\n        topPosition += textareaBounds.top;\n        leftPosition += textareaBounds.left;\n      }\n\n      this.ref.style.top = \"\".concat(topPosition, \"px\");\n      this.ref.style.left = \"\".concat(leftPosition, \"px\");\n\n      (_this$ref$classList = this.ref.classList).remove.apply(_this$ref$classList, unusedClasses);\n\n      (_this$ref$classList2 = this.ref.classList).add.apply(_this$ref$classList2, usedClasses);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var _this$props = this.props,\n          style = _this$props.style,\n          className = _this$props.className,\n          innerRef = _this$props.innerRef,\n          children = _this$props.children,\n          renderToBody = _this$props.renderToBody;\n      var body = document.body;\n      var autocompleteContainer = React.createElement(\"div\", {\n        ref: function ref(_ref) {\n          // $FlowFixMe\n          _this.ref = _ref; // $FlowFixMe\n\n          innerRef(_ref);\n        },\n        className: \"rta__autocomplete \".concat(className || \"\"),\n        style: style\n      }, children);\n      return renderToBody && body !== null ? ReactDOM.createPortal(autocompleteContainer, body) : autocompleteContainer;\n    }\n  }]);\n\n  return Autocomplete;\n}(React.Component);\n\nvar ReactTextareaAutocomplete =\n/*#__PURE__*/\nfunction (_React$Component2) {\n  _inherits(ReactTextareaAutocomplete, _React$Component2);\n\n  function ReactTextareaAutocomplete(_props) {\n    var _this2;\n\n    _classCallCheck(this, ReactTextareaAutocomplete);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(ReactTextareaAutocomplete).call(this, _props));\n    _this2.state = {\n      top: null,\n      left: null,\n      currentTrigger: null,\n      actualToken: \"\",\n      data: null,\n      value: \"\",\n      dataLoading: false,\n      selectionEnd: 0,\n      component: null,\n      textToReplace: null\n    };\n\n    _this2.escListenerInit = function () {\n      if (!_this2.escListener) {\n        _this2.escListener = Listeners.add(KEY_CODES.ESC, _this2._closeAutocomplete);\n      }\n    };\n\n    _this2.escListenerDestroy = function () {\n      if (_this2.escListener) {\n        Listeners.remove(_this2.escListener);\n        _this2.escListener = null;\n      }\n    };\n\n    _this2.getSelectionPosition = function () {\n      if (!_this2.textareaRef) return null;\n      return {\n        selectionStart: _this2.textareaRef.selectionStart,\n        selectionEnd: _this2.textareaRef.selectionEnd\n      };\n    };\n\n    _this2.getSelectedText = function () {\n      if (!_this2.textareaRef) return null;\n      var _this2$textareaRef = _this2.textareaRef,\n          selectionStart = _this2$textareaRef.selectionStart,\n          selectionEnd = _this2$textareaRef.selectionEnd;\n      if (selectionStart === selectionEnd) return null;\n      return _this2.state.value.substr(selectionStart, selectionEnd - selectionStart);\n    };\n\n    _this2.setCaretPosition = function () {\n      var position = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      if (!_this2.textareaRef) return;\n\n      _this2.textareaRef.focus();\n\n      _this2.textareaRef.setSelectionRange(position, position);\n    };\n\n    _this2.getCaretPosition = function () {\n      if (!_this2.textareaRef) {\n        return 0;\n      }\n\n      var position = _this2.textareaRef.selectionEnd;\n      return position;\n    };\n\n    _this2._handleCaretChange = function (e) {\n      if (e.type === \"keydown\") {\n        // $FlowFixMe\n        var code = e.keyCode || e.which;\n\n        switch (code) {\n          case KEY_CODES.UP:\n          case KEY_CODES.DOWN:\n            if (!_this2._isAutocompleteOpen()) {\n              _this2.lastTrigger = _this2.getCaretPosition() - 1;\n            }\n\n            break;\n\n          case KEY_CODES.LEFT:\n          case KEY_CODES.RIGHT:\n            _this2.lastTrigger = _this2.getCaretPosition() - 1;\n            break;\n\n          default:\n        }\n\n        return;\n      }\n\n      _this2.lastTrigger = _this2.getCaretPosition() - 1;\n    };\n\n    _this2._onSelect = function (newToken) {\n      var _this2$state = _this2.state,\n          selectionEnd = _this2$state.selectionEnd,\n          currentTrigger = _this2$state.currentTrigger,\n          textareaValue = _this2$state.value;\n      var trigger = _this2.props.trigger;\n\n      if (!newToken) {\n        _this2._closeAutocomplete();\n\n        return;\n      }\n\n      if (!currentTrigger) return;\n\n      var computeCaretPosition = function computeCaretPosition(position, token, startToken) {\n        switch (position) {\n          case \"start\":\n            return startToken;\n\n          case \"next\":\n          case \"end\":\n            return startToken + token.length;\n\n          default:\n            if (!Number.isInteger(position)) {\n              throw new Error('RTA: caretPosition should be \"start\", \"next\", \"end\" or number.');\n            }\n\n            return position;\n        }\n      };\n\n      var textToModify = textareaValue.slice(0, selectionEnd);\n      var startOfTokenPosition = textToModify.search(\n      /**\n       * It's important to escape the currentTrigger char for chars like [, (,...\n       */\n      new RegExp(\"\\\\\".concat(currentTrigger, \"[^\\\\\".concat(currentTrigger).concat(trigger[currentTrigger].allowWhitespace ? \"\" : \"\\\\s\", \"]\"), \"*$\"))); // we add space after emoji is selected if a caret position is next\n\n      var newTokenString = newToken.caretPosition === \"next\" ? \"\".concat(newToken.text, \" \") : newToken.text;\n      var newCaretPosition = computeCaretPosition(newToken.caretPosition, newTokenString, startOfTokenPosition);\n      var modifiedText = textToModify.substring(0, startOfTokenPosition) + newTokenString;\n      var newValue = textareaValue.replace(textToModify, modifiedText); // set the new textarea value and after that set the caret back to its position\n\n      _this2.setState({\n        value: newValue,\n        dataLoading: false\n      }, function () {\n        var insertedTrigger = _this2.tokenRegExpEnding.exec(newTokenString);\n\n        var insertedTriggerModifier = insertedTrigger ? insertedTrigger[0].length : 1;\n        _this2.lastTrigger = newCaretPosition - insertedTriggerModifier;\n        _this2.textareaRef.value = newValue;\n        _this2.textareaRef.selectionEnd = newCaretPosition;\n\n        _this2._changeHandler();\n\n        var scrollTop = _this2.textareaRef.scrollTop;\n\n        _this2.setCaretPosition(newCaretPosition);\n        /*\n          Chrome does not maintain scroll position\n          Relevant discussion https://github.com/webscopeio/react-textarea-autocomplete/pull/97\n        */\n\n\n        if (window.chrome) {\n          _this2.textareaRef.scrollTop = scrollTop;\n        }\n      });\n    };\n\n    _this2._getTextToReplace = function (_ref2) {\n      var actualToken = _ref2.actualToken,\n          currentTrigger = _ref2.currentTrigger;\n      var triggerSettings = _this2.props.trigger[currentTrigger];\n      if (!currentTrigger || !triggerSettings) return null;\n      var output = triggerSettings.output;\n      return function (item) {\n        if (typeof item === \"object\" && (!output || typeof output !== \"function\")) {\n          throw new Error('Output functor is not defined! If you are using items as object you have to define \"output\" function. https://github.com/webscopeio/react-textarea-autocomplete#trigger-type');\n        }\n\n        if (output) {\n          var textToReplace = output(item, currentTrigger);\n\n          if (textToReplace === undefined || typeof textToReplace === \"number\") {\n            throw new Error(\"Output functor should return string or object in shape {text: string, caretPosition: string | number}.\\nGot \\\"\".concat(String(textToReplace), \"\\\". Check the implementation for trigger \\\"\").concat(currentTrigger, \"\\\" and its token \\\"\").concat(actualToken, \"\\\"\\n\\nSee https://github.com/webscopeio/react-textarea-autocomplete#trigger-type for more informations.\\n\"));\n          }\n\n          if (textToReplace === null) return null;\n\n          if (typeof textToReplace === \"string\") {\n            return {\n              text: textToReplace,\n              caretPosition: DEFAULT_CARET_POSITION\n            };\n          }\n\n          if (!textToReplace.text) {\n            throw new Error(\"Output \\\"text\\\" is not defined! Object should has shape {text: string, caretPosition: string | number}. Check the implementation for trigger \\\"\".concat(currentTrigger, \"\\\" and its token \\\"\").concat(actualToken, \"\\\"\\n\"));\n          }\n\n          if (!textToReplace.caretPosition) {\n            throw new Error(\"Output \\\"caretPosition\\\" is not defined! Object should has shape {text: string, caretPosition: string | number}. Check the implementation for trigger \\\"\".concat(currentTrigger, \"\\\" and its token \\\"\").concat(actualToken, \"\\\"\\n\"));\n          }\n\n          return textToReplace;\n        }\n\n        if (typeof item !== \"string\") {\n          throw new Error(\"Output item should be string\\n\");\n        }\n\n        return {\n          text: \"\".concat(currentTrigger).concat(item).concat(currentTrigger),\n          caretPosition: DEFAULT_CARET_POSITION\n        };\n      };\n    };\n\n    _this2._getCurrentTriggerSettings = function () {\n      var currentTrigger = _this2.state.currentTrigger;\n      if (!currentTrigger) return null;\n      return _this2.props.trigger[currentTrigger];\n    };\n\n    _this2._getValuesFromProvider = function () {\n      var _this2$state2 = _this2.state,\n          currentTrigger = _this2$state2.currentTrigger,\n          actualToken = _this2$state2.actualToken;\n\n      var triggerSettings = _this2._getCurrentTriggerSettings();\n\n      if (!currentTrigger || !triggerSettings) {\n        return;\n      }\n\n      var dataProvider = triggerSettings.dataProvider,\n          component = triggerSettings.component;\n\n      if (typeof dataProvider !== \"function\") {\n        throw new Error(\"Trigger provider has to be a function!\");\n      }\n\n      _this2.setState({\n        dataLoading: true\n      });\n\n      var providedData = dataProvider(actualToken);\n\n      if (!(providedData instanceof Promise)) {\n        providedData = Promise.resolve(providedData);\n      }\n\n      providedData.then(function (data) {\n        if (!Array.isArray(data)) {\n          throw new Error(\"Trigger provider has to provide an array!\");\n        }\n\n        if (typeof component !== \"function\") {\n          throw new Error(\"Component should be defined!\");\n        } // throw away if we resolved old trigger\n\n\n        if (currentTrigger !== _this2.state.currentTrigger) return; // if we haven't resolved any data let's close the autocomplete\n\n        if (!data.length) {\n          _this2._closeAutocomplete();\n\n          return;\n        }\n\n        _this2.setState({\n          dataLoading: false,\n          data: data,\n          component: component\n        });\n      }).catch(function (e) {\n        return errorMessage(e.message);\n      });\n    };\n\n    _this2._getSuggestions = function () {\n      var _this2$state3 = _this2.state,\n          currentTrigger = _this2$state3.currentTrigger,\n          data = _this2$state3.data;\n      if (!currentTrigger || !data || data && !data.length) return null;\n      return data;\n    };\n\n    _this2._createRegExp = function () {\n      var trigger = _this2.props.trigger; // negative lookahead to match only the trigger + the actual token = \"bladhwd:adawd:word test\" => \":word\"\n      // https://stackoverflow.com/a/8057827/2719917\n\n      _this2.tokenRegExp = new RegExp(\"(\".concat(Object.keys(trigger) // the sort is important for multi-char combos as \"/kick\", \"/\"\n      .sort(function (a, b) {\n        if (a < b) {\n          return 1;\n        }\n\n        if (a > b) {\n          return -1;\n        }\n\n        return 0;\n      }).map(function (a) {\n        return \"\\\\\".concat(a);\n      }).join(\"|\"), \")((?:(?!\\\\1)[^\\\\s])*$)\"));\n      _this2.tokenRegExpEnding = new RegExp(\"(\".concat(Object.keys(trigger) // the sort is important for multi-char combos as \"/kick\", \"/\"\n      .sort(function (a, b) {\n        if (a < b) {\n          return 1;\n        }\n\n        if (a > b) {\n          return -1;\n        }\n\n        return 0;\n      }).map(function (a) {\n        return \"\\\\\".concat(a);\n      }).join(\"|\"), \")$\"));\n    };\n\n    _this2._closeAutocomplete = function () {\n      _this2.escListenerDestroy();\n\n      _this2.setState({\n        data: null,\n        dataLoading: false,\n        currentTrigger: null\n      });\n    };\n\n    _this2._cleanUpProps = function () {\n      var props = _objectSpread({}, _this2.props);\n\n      var notSafe = [\"loadingComponent\", \"boundariesElement\", \"containerStyle\", \"minChar\", \"scrollToItem\", \"ref\", \"innerRef\", \"onChange\", \"onCaretPositionChange\", \"className\", \"value\", \"trigger\", \"listStyle\", \"itemStyle\", \"containerStyle\", \"loaderStyle\", \"className\", \"containerClassName\", \"listClassName\", \"itemClassName\", \"loaderClassName\", \"dropdownStyle\", \"dropdownClassName\", \"movePopupAsYouType\", \"textAreaComponent\", \"renderToBody\"]; // eslint-disable-next-line\n\n      for (var prop in props) {\n        if (notSafe.includes(prop)) delete props[prop];\n      }\n\n      return props;\n    };\n\n    _this2._changeHandler = function (e) {\n      var _this2$props = _this2.props,\n          trigger = _this2$props.trigger,\n          onChange = _this2$props.onChange,\n          minChar = _this2$props.minChar,\n          onCaretPositionChange = _this2$props.onCaretPositionChange,\n          movePopupAsYouType = _this2$props.movePopupAsYouType;\n      var _this2$state4 = _this2.state,\n          top = _this2$state4.top,\n          left = _this2$state4.left;\n      var event = e;\n\n      if (!event) {\n        // fire onChange event after successful selection\n        event = new CustomEvent(\"change\", {\n          bubbles: true\n        });\n\n        _this2.textareaRef.dispatchEvent(event);\n      }\n\n      var textarea = event.target;\n      var selectionEnd = textarea.selectionEnd;\n      var value = textarea.value;\n      _this2.lastValueBubbledEvent = value;\n\n      if (onChange && event) {\n        event.persist && event.persist();\n        onChange(event);\n      }\n\n      if (onCaretPositionChange) {\n        var caretPosition = _this2.getCaretPosition();\n\n        onCaretPositionChange(caretPosition);\n      }\n\n      _this2.setState({\n        value: value\n      });\n\n      var setTopLeft = function setTopLeft() {\n        var _getCaretCoordinates = getCaretCoordinates(textarea, selectionEnd),\n            newTop = _getCaretCoordinates.top,\n            newLeft = _getCaretCoordinates.left;\n\n        _this2.setState({\n          // make position relative to textarea\n          top: newTop - _this2.textareaRef.scrollTop || 0,\n          left: newLeft\n        });\n      };\n\n      var cleanLastTrigger = function cleanLastTrigger(triggerLength) {\n        _this2.lastTrigger = selectionEnd - triggerLength;\n\n        _this2._closeAutocomplete();\n\n        setTopLeft();\n      };\n\n      if (selectionEnd <= _this2.lastTrigger) {\n        var _affectedTextareaValue = value.slice(0, selectionEnd);\n\n        var _newTrigger = _this2.tokenRegExp.exec(_affectedTextareaValue);\n\n        cleanLastTrigger(_newTrigger ? _newTrigger[0].length : 0);\n      }\n\n      var affectedTextareaValue = value.slice(_this2.lastTrigger, selectionEnd);\n\n      var tokenMatch = _this2.tokenRegExp.exec(affectedTextareaValue);\n\n      var lastToken = tokenMatch && tokenMatch[0];\n      var currentTrigger = tokenMatch && tokenMatch[1] || null; // with this approach we want to know if the user just inserted a new trigger sequence\n\n      var newTrigger = _this2.tokenRegExpEnding.exec(affectedTextareaValue);\n\n      if (newTrigger) {\n        cleanLastTrigger(newTrigger[0].length);\n      } else if (!_this2._isAutocompleteOpen()) {\n        _this2._closeAutocomplete();\n      }\n      /*\n       if we lost the trigger token or there is no following character we want to close\n       the autocomplete\n      */\n\n\n      if ((!lastToken || lastToken.length <= minChar) && ( // check if our current trigger disallows whitespace\n      _this2.state.currentTrigger && !trigger[_this2.state.currentTrigger].allowWhitespace || !_this2.state.currentTrigger)) {\n        _this2._closeAutocomplete();\n\n        return;\n      }\n      /**\n       * This code has to be sync that is the reason why we obtain the currentTrigger\n       * from currentTrigger not this.state.currentTrigger\n       *\n       * Check if the currently typed token has to be afterWhitespace, or not.\n       *\n       * This setting means that there has to be whitespace before the token (on it has to be the the first character typed into textarea)\n       */\n\n\n      if (currentTrigger && trigger[currentTrigger].afterWhitespace && !/\\s/.test(value[selectionEnd - lastToken.length - 1]) && value[selectionEnd - lastToken.length - 1] !== undefined) {\n        _this2._closeAutocomplete();\n\n        return;\n      }\n      /**\n        If our current trigger allows whitespace\n        get the correct token for DataProvider, so we need to construct new RegExp\n       */\n\n\n      if (_this2.state.currentTrigger && trigger[_this2.state.currentTrigger].allowWhitespace) {\n        tokenMatch = new RegExp(\"\\\\\".concat(_this2.state.currentTrigger, \".*$\")).exec(value.slice(0, selectionEnd));\n        lastToken = tokenMatch && tokenMatch[0];\n\n        if (!lastToken) {\n          _this2._closeAutocomplete();\n\n          return;\n        }\n\n        currentTrigger = Object.keys(trigger).find(function (a) {\n          return a === lastToken[0];\n        }) || null;\n      }\n\n      var actualToken = lastToken.slice(1); // if trigger is not configured step out from the function, otherwise proceed\n\n      if (!currentTrigger) {\n        return;\n      }\n\n      if (movePopupAsYouType || top === null && left === null || // if the trigger got changed, let's reposition the autocomplete\n      _this2.state.currentTrigger !== currentTrigger) {\n        setTopLeft();\n      }\n\n      _this2.escListenerInit();\n\n      var textToReplace = _this2._getTextToReplace({\n        actualToken: actualToken,\n        currentTrigger: currentTrigger\n      });\n\n      _this2.setState({\n        selectionEnd: selectionEnd,\n        currentTrigger: currentTrigger,\n        textToReplace: textToReplace,\n        actualToken: actualToken\n      }, function () {\n        try {\n          _this2._getValuesFromProvider();\n        } catch (err) {\n          errorMessage(err.message);\n        }\n      });\n    };\n\n    _this2._selectHandler = function (e) {\n      var _this2$props2 = _this2.props,\n          onCaretPositionChange = _this2$props2.onCaretPositionChange,\n          onSelect = _this2$props2.onSelect;\n\n      if (onCaretPositionChange) {\n        var caretPosition = _this2.getCaretPosition();\n\n        onCaretPositionChange(caretPosition);\n      }\n\n      if (onSelect) {\n        e.persist();\n        onSelect(e);\n      }\n    };\n\n    _this2._onClickAndBlurHandler = function (e) {\n      var onBlur = _this2.props.onBlur; // If this is a click: e.target is the textarea, and e.relatedTarget is the thing\n      // that was actually clicked. If we clicked inside the autoselect dropdown, then\n      // that's not a blur, from the autoselect's point of view, so then do nothing.\n\n      var el = e.relatedTarget;\n\n      if (_this2.dropdownRef && el instanceof Node && _this2.dropdownRef.contains(el)) {\n        return;\n      }\n\n      _this2._closeAutocomplete();\n\n      if (onBlur) {\n        e.persist();\n        onBlur(e);\n      }\n    };\n\n    _this2._onScrollHandler = function () {\n      _this2._closeAutocomplete();\n    };\n\n    _this2._dropdownScroll = function (item) {\n      var scrollToItem = _this2.props.scrollToItem;\n      if (!scrollToItem) return;\n\n      if (scrollToItem === true) {\n        defaultScrollToItem(_this2.dropdownRef, item);\n        return;\n      }\n\n      if (typeof scrollToItem !== \"function\" || scrollToItem.length !== 2) {\n        throw new Error(\"`scrollToItem` has to be boolean (true for default implementation) or function with two parameters: container, item.\");\n      }\n\n      scrollToItem(_this2.dropdownRef, item);\n    };\n\n    _this2._isAutocompleteOpen = function () {\n      var _this2$state5 = _this2.state,\n          dataLoading = _this2$state5.dataLoading,\n          currentTrigger = _this2$state5.currentTrigger;\n\n      var suggestionData = _this2._getSuggestions();\n\n      return !!((dataLoading || suggestionData) && currentTrigger);\n    };\n\n    _this2._textareaRef = function (ref) {\n      // $FlowFixMe - ref is actually a `?HTMLTextAreaElement`\n      _this2.props.innerRef && _this2.props.innerRef(ref);\n      _this2.textareaRef = ref;\n    };\n\n    _this2.lastTrigger = 0;\n    _this2.escListener = null;\n    var _this2$props3 = _this2.props,\n        loadingComponent = _this2$props3.loadingComponent,\n        _trigger = _this2$props3.trigger,\n        _value = _this2$props3.value;\n    if (_value) _this2.state.value = _value;\n\n    _this2._createRegExp();\n\n    if (!loadingComponent) {\n      throw new Error(\"RTA: loadingComponent is not defined\");\n    }\n\n    if (!_trigger) {\n      throw new Error(\"RTA: trigger is not defined\");\n    }\n\n    return _this2;\n  }\n\n  _createClass(ReactTextareaAutocomplete, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      Listeners.startListen(this.textareaRef); // handle caret change\n\n      this.textareaRef && this.textareaRef.addEventListener(\"focus\", this._handleCaretChange);\n      this.textareaRef && this.textareaRef.addEventListener(\"click\", this._handleCaretChange);\n      this.textareaRef && this.textareaRef.addEventListener(\"keydown\", this._handleCaretChange);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(_ref3) {\n      var oldTrigger = _ref3.trigger,\n          oldValue = _ref3.value;\n      var _this$props2 = this.props,\n          trigger = _this$props2.trigger,\n          value = _this$props2.value;\n\n      if (Object.keys(trigger).join(\"\") !== Object.keys(oldTrigger).join(\"\")) {\n        this._createRegExp();\n      }\n\n      if (oldValue !== value && this.lastValueBubbledEvent !== value) {\n        this.lastTrigger = 0;\n\n        this._changeHandler();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.escListenerDestroy();\n      Listeners.stopListen(this.textareaRef); // handle caret change\n\n      this.textareaRef && this.textareaRef.removeEventListener(\"focus\", this._handleCaretChange);\n      this.textareaRef && this.textareaRef.removeEventListener(\"click\", this._handleCaretChange);\n      this.textareaRef && this.textareaRef.removeEventListener(\"keydown\", this._handleCaretChange);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$props3 = this.props,\n          Loader = _this$props3.loadingComponent,\n          style = _this$props3.style,\n          className = _this$props3.className,\n          listStyle = _this$props3.listStyle,\n          itemStyle = _this$props3.itemStyle,\n          boundariesElement = _this$props3.boundariesElement,\n          movePopupAsYouType = _this$props3.movePopupAsYouType,\n          listClassName = _this$props3.listClassName,\n          itemClassName = _this$props3.itemClassName,\n          dropdownClassName = _this$props3.dropdownClassName,\n          dropdownStyle = _this$props3.dropdownStyle,\n          containerStyle = _this$props3.containerStyle,\n          containerClassName = _this$props3.containerClassName,\n          loaderStyle = _this$props3.loaderStyle,\n          loaderClassName = _this$props3.loaderClassName,\n          textAreaComponent = _this$props3.textAreaComponent,\n          renderToBody = _this$props3.renderToBody;\n      var _this$state = this.state,\n          left = _this$state.left,\n          top = _this$state.top,\n          dataLoading = _this$state.dataLoading,\n          component = _this$state.component,\n          value = _this$state.value,\n          textToReplace = _this$state.textToReplace;\n\n      var isAutocompleteOpen = this._isAutocompleteOpen();\n\n      var suggestionData = this._getSuggestions();\n\n      var extraAttrs = {};\n      var TextAreaComponent;\n\n      if (textAreaComponent.component) {\n        TextAreaComponent = textAreaComponent.component;\n        extraAttrs[textAreaComponent.ref] = this._textareaRef;\n      } else {\n        TextAreaComponent = textAreaComponent;\n        extraAttrs.ref = this._textareaRef;\n      }\n\n      return React.createElement(\"div\", {\n        className: \"rta \".concat(dataLoading === true ? \"rta--loading\" : \"\", \" \").concat(containerClassName || \"\"),\n        style: containerStyle\n      }, React.createElement(TextAreaComponent, Object.assign({}, this._cleanUpProps(), {\n        className: \"rta__textarea \".concat(className || \"\"),\n        onChange: this._changeHandler,\n        onSelect: this._selectHandler,\n        onScroll: this._onScrollHandler,\n        onClick: // The textarea itself is outside the autoselect dropdown.\n        this._onClickAndBlurHandler,\n        onBlur: this._onClickAndBlurHandler,\n        value: value,\n        style: style\n      }, extraAttrs)), isAutocompleteOpen && React.createElement(Autocomplete, {\n        innerRef: function innerRef(ref) {\n          // $FlowFixMe\n          _this3.dropdownRef = ref;\n        },\n        top: top,\n        left: left,\n        style: dropdownStyle,\n        className: dropdownClassName,\n        movePopupAsYouType: movePopupAsYouType,\n        boundariesElement: boundariesElement,\n        textareaRef: this.textareaRef,\n        renderToBody: renderToBody\n      }, suggestionData && component && textToReplace && React.createElement(List, {\n        values: suggestionData,\n        component: component,\n        style: listStyle,\n        className: listClassName,\n        itemClassName: itemClassName,\n        itemStyle: itemStyle,\n        getTextToReplace: textToReplace,\n        onSelect: this._onSelect,\n        dropdownScroll: this._dropdownScroll\n      }), dataLoading && React.createElement(\"div\", {\n        className: \"rta__loader \".concat(suggestionData !== null ? \"rta__loader--suggestion-data\" : \"rta__loader--empty-suggestion-data\", \" \").concat(loaderClassName || \"\"),\n        style: loaderStyle\n      }, React.createElement(Loader, {\n        data: suggestionData\n      }))));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(_ref4) {\n      var value = _ref4.value;\n      if (value === null || value === undefined) return null;\n      return {\n        value: value\n      };\n    }\n  }]);\n\n  return ReactTextareaAutocomplete;\n}(React.Component);\n\nReactTextareaAutocomplete.defaultProps = {\n  movePopupAsYouType: false,\n  value: null,\n  minChar: 1,\n  boundariesElement: \"body\",\n  scrollToItem: true,\n  textAreaComponent: \"textarea\",\n  renderToBody: false\n};\nexport default ReactTextareaAutocomplete;","map":null,"metadata":{},"sourceType":"module"}